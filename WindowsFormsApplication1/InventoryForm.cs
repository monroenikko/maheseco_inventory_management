using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using MySql.Data.MySqlClient;
using System.Globalization;
using System.Timers;

namespace WindowsFormsApplication1
{
    
    public partial class InventoryForm : Form
    {
        MySqlConnection connection = new MySqlConnection("datasource=localhost; Database=maheseco; port= 3306; username=root;password=");
        
        private MySqlDataAdapter Adapter;
        private DataSet ds = new DataSet();
        DataTable dt = new DataTable();
         
        private MySqlCommand Cmd;
         
        MySqlDataReader Reader;


        string getStatus1;
        string getStatus2;
        string getStatus3;

      //  OR.Text, tsupname.Text,Ddate.Text, id.Text
       
        public InventoryForm(string user, string num1)
        {
            InitializeComponent();
            autoComplete();
            autoComplete1();

            this.KeyPreview = true;

            Username.Text = user;
            timein.Text = num1;
            lblBadge.Visible = false;

            //for generated batch to inventory medicine
            fillcombo();

            //for generated logs (inventory medicine)
            fillcomboToGL();
            
            fillcomboToEXP();
            tb_id.Enabled = false;

            



        }

        
        private void Responsive_Load(object sender, EventArgs e)
        {
                        
            total_monthly.Enabled = false;
            P_id.Enabled = false;
            

            tb_search.Text = "search";

            //autogenerated id
            postId();
            UserId();


            //lblPM.Text = "Product Maintenance";
            add_panel.Visible = true;
            panel13.Visible = true;
            tInventory.Visible = false;
            psearch.Visible = false;

             psettings.Visible = false;
             pset.Visible = false;
             preports.Visible = false;
             pdate.Visible = false;


            tempid.Enabled = false;

            panelCP.Visible = false;

            welcome();
            
            lblPM.Text = "HOME";
            fillNotification();
            MessageBoxNotif();

            p_returned_med.Visible = false;
            retrive();
            //retrieve();

            GenerateData();
            

            ControlExtension.Draggable(P_EDIT, true);
            ControlExtension.Draggable(p_damageMed, true);
            ControlExtension.Draggable(p_HistoryLogs, true);

            


            tboldprice.Enabled = false;
            tbitemname.Enabled = false;
            tb_expQty.Enabled = false;
            tb_itemnamedamage.Enabled = false;

            //System.Timers.Timer timer = new System.Timers.Timer();
            //timer.Interval = 1000;
            //timer.Elapsed += Timer_Elapsed;
            //timer.Start();

            timer1.Start();
        }

        //private void Timer_Elapsed(object sender, ElapsedEventArgs e)
        //{
        //    circularProgressBar1.Invoke((MethodInvoker)delegate
        //    {
        //        circularProgressBar1.Text = DateTime.Now.ToString("hh:mm:ss");
        //        circularProgressBar1.SubscriptText = DateTime.Now.ToString("tt");
        //    });
        //}

        private void timer1_Tick(object sender, EventArgs e)
        {
            lbltime.Text = DateTime.Now.ToString("hh:mm");
            lblsecond.Text = DateTime.Now.ToString("ss");
            lblDate.Text = DateTime.Now.ToString("MMMM dd yyyy");
            lblDay.Text = DateTime.Now.ToString("dddd");
        }

        private void retrive()
        {
            
            string insert = "INSERT INTO log (username ,password)"
            + "VALUES('" + tun.Text + "', '" + tpw.Text + "');";

            Cmd = new MySqlCommand(insert, connection);

            try
            {
                connection.Open();
                
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
                connection.Close();
            }

        }


       




        void postId()
        {
            connection.Open();
            try
            {
                Cmd = new MySqlCommand("SELECT max(ItemID)+1 FROM drug", connection);
                P_id.Text = Cmd.ExecuteScalar().ToString();
            }
            finally
            {
                connection.Close();
            }
        }

        void UserId()
        {
            connection.Open();
            try
            {
                Cmd = new MySqlCommand("SELECT max(uid)+1 FROM log", connection);
                tempid.Text = Cmd.ExecuteScalar().ToString();
            }
            finally
            {
                connection.Close();
            }
        }





        //clear data

        string unit;

        private void clear()
        {
            // P_id.Text = "";
            item.Text = "blank";
            UnitCost.Text = "";
            supdate.Text = "";
            Exdate.Text = "";
            ccat.Text = "select category";
            cbrand.Text = "select brand";
            unit.ToString();
            unit1.Text = "select unit";
            unit2.Text = "select";
            unit3.Text = "select";
            UnitCost.Text = "0.00";
            qty.Text = "0";

            rb_active.Checked = false;
            rb_nActive.Checked = false;

            OR.Text = "";
            tsupname.Text = "";
            csupplier.Text = "select Supplier";
            tb_req_no.Text = "";


            // item.Text, ccat.Text, cbrand.Text, unit.Text, UnitCost.Text, qty.Text, Ddate.Text, Exdate.Text
        }

        //databinding


        private void tb_search_OnTextChange(object sender, EventArgs e)
        {
             
        }

        private void panel5_Paint(object sender, PaintEventArgs e)
        {

        }

      

        private void add_panel_Paint(object sender, PaintEventArgs e)
        {

        }

        private void btnEdit_Click(object sender, EventArgs e)
        {
            // string sql = "UPDATE product SET category='" + ccat.Text + "', U_Cost='" + UnitCost.Text + "',  del_date='" + Ddate.Text + "',exp_date='" + Exdate.Text + "'  WHERE prod_id=" + P_id.Text + " ";
            // string sql1 = "UPDATE prod_brand SET unit='" + unit1.Text + "', qty='" + qty.Text + "', reorder='" + text_reorder.Text + "'  WHERE brand_id=" + P_id.Text + " ";
            // string sql2 = "UPDATE prod_cat SET item='" + item.Text + "', brand='" + cbrand.Text + "', status='" + status.Text + "'  WHERE cat_id=" + P_id.Text + " ";

            string sql = "UPDATE drug SET ItemName='" + item.Text + "', Category='" + ccat.Text + "',  brand='" + cbrand.Text + "',unit='" + unit1.Text + "',stockQty='" + qty.Text + "',price='" + UnitCost.Text + "' ,delDate='" + supdate.Text + "' ,expDate='" + Exdate.Text + "' ,Status='" + status.Text + "'  WHERE ItemID=" + P_id.Text + " ";


            connection.Open();

            MySqlCommand command = new MySqlCommand(sql, connection);
           // MySqlCommand command1 = new MySqlCommand(sql1, connection);
            //MySqlCommand command2 = new MySqlCommand(sql2, connection);

            try
            {
                if (command.ExecuteNonQuery() == 1) // && command1.ExecuteNonQuery() == 1 && command2.ExecuteNonQuery() == 1)
                {
                    MessageBox.Show("data is now updated", "UPDATE", MessageBoxButtons.OK, MessageBoxIcon.Information);

                   // populateLV(P_id.Text, item.Text, ccat.Text, cbrand.Text, unit1.Text, UnitCost.Text, qty.Text, supdate.Text, Exdate.Text, status.Text);
                    clear();

                   
                }
                else
                {
                    MessageBox.Show("data is not updated", "UPDATE", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }


            connection.Close();
        }

        void saveMe()
        {
            //MessageBox.Show("data Saved!", "purchase outside", MessageBoxButtons.OK, MessageBoxIcon.Information);
            string insert = "INSERT INTO drug (ItemID ,ItemName ,category ,brand ,unit ,stockQty ,price ,SupplierRef ,delDate ,expDate ,Status, reqNo, reOrdered, batchNo)"
             + "VALUES('" + P_id.Text + "','" + item.Text + "', '" + ccat.Text + "', '" + cbrand.Text + "','" + unit + "','" + qty.Text + "','" + UnitCost.Text + "','" + csupplier.Text + "', '" + supdate.Text + "', '" + Exdate.Text + "', '" + status.Text + "', '" + tb_req_no.Text + "', '" + text_reorder.Text + "', '" + batchNo.Text + "' );";
            //connection.Open();

            string insert1 = "INSERT INTO drug_product (ItemID ,ItemName ,category ,brand ,unit ,stockQty ,price ,SupplierRef ,delDate ,expDate ,Status, reqNo, reOrdered, batchNo, beforeExp)"
             + "VALUES('" + P_id.Text + "','" + item.Text + "', '" + ccat.Text + "', '" + cbrand.Text + "','" + unit + "','" + qty.Text + "','" + UnitCost.Text + "','" + csupplier.Text + "', '" + supdate.Text + "', '" + Exdate.Text + "', '" + status.Text + "', '" + tb_req_no.Text + "', '" + text_reorder.Text + "', '" + batchNo.Text + "','" + exdatebefore.Text + "');";
            //connection.Open();

            string insertto = "INSERT INTO drug_consume (ItemID ,ItemName ,category ,brand ,unit, stockQty2 , price , batchNo)"
            + "VALUES('" + P_id.Text + "','" + item.Text + "', '" + ccat.Text + "', '" + cbrand.Text + "','" + unit + "','" + 0 + "','" + UnitCost.Text + "','" + batchNo.Text + "');";

            string insertto1 = "INSERT INTO drug_logs (ItemID ,ItemName, stockQty1, batchNo )"
            + "VALUES('" + P_id.Text + "', '" + item.Text + "', '" + qty.Text + "','" + batchNo.Text + "');";


            Cmd = new MySqlCommand(insert, connection);

            MySqlCommand Cmd1 = new MySqlCommand(insertto, connection);

            MySqlCommand Cmd2 = new MySqlCommand(insertto1, connection);

            MySqlCommand Cmd3 = new MySqlCommand(insert1, connection);

            try
            {
                if (Cmd.ExecuteNonQuery() == 1 && Cmd1.ExecuteNonQuery() == 1 && Cmd2.ExecuteNonQuery() == 1 && Cmd3.ExecuteNonQuery() == 1)
                {
                    MessageBox.Show("data Saved!", "SAVE", MessageBoxButtons.OK, MessageBoxIcon.Information);


                    try
                    {
                        Cmd = new MySqlCommand("SELECT max(ItemID)+1 FROM drug", connection);
                        P_id.Text = Cmd.ExecuteScalar().ToString();
                    }
                    finally
                    {
                        connection.Close();
                    }

                    clear();
                    batchNo.Text = "";

                }
                else
                {
                    MessageBox.Show("data is not Save!", "SAVE", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }


            connection.Close();
            autoComplete();
        }

        private void btn_save_Click(object sender, EventArgs e)
        {
            DateTime date = DateTime.Now;
            string MySQLFormatDate = date.ToString("yyyy-MM-dd");
            string todayTime = MySQLFormatDate.ToString();

            if (ccat.Text.Contains("select category") && item.Text.Contains("blank") && cbrand.Text.Contains("select brand") && qty.Text.Contains("0") && UnitCost.Text.Contains("0.00") && text_reorder.Text.Contains("0.00") && csupplier.Text.Contains("select Supplier") )
            {
                MessageBox.Show("Please input the given field(s)", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            else
            {

                try
                {
                    connection.Close();

                    Cmd = new MySqlCommand("SELECT * FROM drug_product WHERE ItemName = '" + item.Text + "' ", connection);
                    MySqlDataAdapter da = new MySqlDataAdapter(Cmd);

                    connection.Open();
                    //execute reader
                    da.Fill(ds);

                    int i = ds.Tables[0].Rows.Count;

                    if (i > 0)
                    {
                        //OrNum = Reader.GetString("batchNo");
                        MessageBox.Show("Medicine is already exists");
                        ds.Clear();
                    }
                    else
                    {


                        if (MessageBox.Show("Do you want to save it now?", "SAVE", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)
                        {

                            if (Exdate.Text == supdate.Text)
                            {
                                MessageBox.Show("Please set the expiration date", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                            }
                            else
                            {
                                if (csupplier.SelectedItem.ToString() == "purchaseoutside")
                                {
                                    string insert1 = "INSERT INTO purchaseoutside(purchaseNo,name,date,ItemID)"
                                     + "VALUES('" + OR.Text + "', '" + tsupname.Text + "', '" + supdate.Text + "', '" + P_id.Text + "');";
                                    connection.Close();
                                    connection.Open();

                                    Cmd = new MySqlCommand(insert1, connection);

                                    try
                                    {
                                        if (Cmd.ExecuteNonQuery() == 1)
                                        {
                                            //
                                            saveMe();
                                            connection.Open();
                                        }
                                        else
                                        {
                                            MessageBox.Show("data is not Save!", "purchase outside", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        MessageBox.Show(ex.Message);
                                    }

                                    connection.Close();
                                    connection.Open();


                                }
                                else if (csupplier.SelectedItem.ToString() == "csr")
                                {
                                    string insert1 = "INSERT INTO csr(purchaseNo, suppName, suppDate, ItemID)"
                                    + "VALUES('" + OR.Text + "', '" + tsupname.Text + "', '" + supdate.Text + "', '" + P_id.Text + "');";

                                    connection.Close();
                                    connection.Open();
                                    Cmd = new MySqlCommand(insert1, connection);

                                    try
                                    {
                                        if (Cmd.ExecuteNonQuery() == 1)
                                        {
                                            //
                                            saveMe();
                                            // connection.Open();

                                        }
                                        else
                                        {
                                            MessageBox.Show("data is not Save!", "CSR", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        MessageBox.Show(ex.Message);
                                    }

                                    connection.Close();
                                    connection.Open();
                                }
                            }



                            //save the item

                        }
                        else
                        {
                            MessageBox.Show("data is not Save!", "SAVE", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }
                        //closing the first condition haha
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }
            }
            
        }


        //int idno;
        
        string bNo;
        private void tb_search_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                try
                {

                    // string sql = "SELECT product.prod_id, product.category, product.U_Cost,  product.del_date, product.exp_date, prod_brand.unit, prod_brand.qty, prod_cat.item, prod_cat.brand FROM product join prod_brand on prod_brand.brand_id = prod_id join prod_cat on prod_cat.cat_id = prod_id WHERE prod_cat.item LIKE '" + tb_search.Text + "' ";
                    string sql = "SELECT *  FROM drug_product WHERE ItemName LIKE  '" + tb_search.Text + "' ";
                    Cmd = new MySqlCommand(sql, connection);
                    //  connection.Open();
                    Reader = Cmd.ExecuteReader();

                    if (Reader.Read())
                    {
                        tb_id.Text = Reader.GetString("ItemID");
                        cb_cat.Text = Reader.GetString("category");
                        tb_supfrom.Text = Reader.GetString("SupplierRef");
                        tb_cost.Text = Reader.GetString("price");
                        dp_dd.Text = Reader.GetString("delDate");
                        dp_ed.Text = Reader.GetString("expDate");
                        //edit_cunitname.Text = Reader.GetString("unit");
                        tb_qty.Text = Reader.GetString("stockQty");
                        tb_item.Text = Reader.GetString("ItemName");
                        cb_brandd.Text = Reader.GetString("brand");
                         bNo = Reader.GetString("batchNo");

                        if (Reader.GetString("Status") == "active")
                        {
                            ractive.Select();
                        }
                        else
                        {
                            rdactive.Select();
                        }

                        //batchno();
                        tb_batchno.Items.Clear();
                        suggestBatch();


                    }
                    else
                    {
                        MessageBox.Show("not found", "FOUND", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                    connection.Close();
                }
                catch
                {
                  
                    connection.Open();

                    string sql = "SELECT *  FROM drug_product WHERE ItemName LIKE  '" + tb_search.Text + "' ";
                    Cmd = new MySqlCommand(sql, connection);
                    //  connection.Open();
                    Reader = Cmd.ExecuteReader();

                    if (Reader.Read())
                    {
                        tb_id.Text = Reader.GetString("ItemID");
                        cb_cat.Text = Reader.GetString("category");
                        tb_supfrom.Text = Reader.GetString("SupplierRef");
                        tb_cost.Text = Reader.GetString("price");
                        dp_dd.Text = Reader.GetString("delDate");
                        dp_ed.Text = Reader.GetString("expDate");
                        //edit_cunitname.Text = Reader.GetString("unit");
                        tb_qty.Text = Reader.GetString("stockQty");
                        tb_item.Text = Reader.GetString("ItemName");
                        cb_brandd.Text = Reader.GetString("brand");
                        bNo = Reader.GetString("batchNo");

                        if (Reader.GetString("Status") == "active")
                        {
                            ractive.Select();
                        }
                        else
                        {
                            rdactive.Select();
                        }

                        // batchno();
                        tb_batchno.Items.Clear();
                        suggestBatch();


                    }
                    else
                    {
                        MessageBox.Show("not found", "FOUND", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                    connection.Close();
                }
            }
        }


        void autoComplete()
        {
            tb_search.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
            tb_search.AutoCompleteSource = AutoCompleteSource.CustomSource;
            AutoCompleteStringCollection colll = new AutoCompleteStringCollection();

            try
            {
                string sql = "SELECT * FROM drug_product";
                Cmd = new MySqlCommand(sql, connection);
                connection.Open();

                Reader = Cmd.ExecuteReader();

                while (Reader.Read())
                {
                   
                    string item2 = Reader.GetString("ItemName");
                    colll.Add(item2);

                }
                
                connection.Close();

            }
            catch
            {

            }
            tb_search.AutoCompleteCustomSource = colll;
        }

        private void btn_slidePanel_Click(object sender, EventArgs e)
        {
            logo.Visible = true;
 
            if (phome.Width == 287)
            {
                phome.Visible = false;
                phome.Width = 63;
                epeks.ShowSync(phome);
                 

            }
            else
            {
                logo.Visible = false;
                phome.Visible = false;
                phome.Width = 287;

                epeks.ShowSync(phome);

                btnhome.Visible = true;
                b1.Visible = true;
                b2.Visible = true;
                b3.Visible = true;
                b4.Visible = true;
            }
        }

        private void rb_active_CheckedChanged(object sender, EventArgs e)
        {
            string active = "active";
            status.Text = active.ToString();
        }

        private void rb_nActive_CheckedChanged(object sender, EventArgs e)
        {
            string active = "active";
            status.Text = active.ToString();
        }

        private void tb_search_Enter(object sender, EventArgs e)
        {
            if (tb_search.Text == "search")
            {
                tb_search.Text = "";
                tb_search.ForeColor = Color.Green;
            }
        }

        private void tb_search_Leave(object sender, EventArgs e)
        {
            if (tb_search.Text == "")
            {
                tb_search.Text = "search";
                tb_search.ForeColor = Color.Green;
            }
        }

        private void item_Enter(object sender, EventArgs e)
        {
            if (item.Text == "blank")
            {
                item.Text = "";
                item.ForeColor = Color.Green;
            }
        }

        private void item_Leave(object sender, EventArgs e)
        {
            if (item.Text == "")
            {
                item.Text = "blank";
                item.ForeColor = Color.Green;
            }
        }

        private void qty_Enter(object sender, EventArgs e)
        {
            if (qty.Text == "0")
            {
                qty.Text = "";
                qty.ForeColor = Color.Green;
            }


        }

        private void qty_Leave(object sender, EventArgs e)
        {
            if (qty.Text == "")
            {
                qty.Text = "0";
                qty.ForeColor = Color.Green;
            }
        }

        private void unit1_SelectedValueChanged(object sender, EventArgs e)
        {
            getStatus1 = unit1.SelectedItem.ToString() + " ";
            getallunit();

        }

        void scape()
        {
            if (MessageBox.Show("Are you Sure, Do you want to logout?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                this.Hide();
                mform frm = new mform();
                frm.Show();
            }
        }

        private void logout_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            scape();
        }

        private void unit1_SelectedIndexChanged(object sender, EventArgs e)
        {
            getStatus1 = unit1.SelectedItem.ToString() + " ";
            getallunit();
        }

        private void unit2_SelectedIndexChanged(object sender, EventArgs e)
        {
            getStatus2 = unit2.SelectedItem.ToString() + " ";
            getallunit();
        }

        private void unit3_SelectedIndexChanged(object sender, EventArgs e)
        {
            getStatus3 = unit3.SelectedItem.ToString();
            getallunit();
        }

        void getallunit()
        {
            unit = getStatus1 + getStatus2 + getStatus3;
        }

       

        private void UnitCost_Enter(object sender, EventArgs e)
        {
            if (UnitCost.Text == "0.00")
            {
                UnitCost.Text = "";
                UnitCost.ForeColor = Color.Green;
            }
        }

        private void UnitCost_Leave(object sender, EventArgs e)
        {
            if (UnitCost.Text == "")
            {
                UnitCost.Text = "0.00";
                UnitCost.ForeColor = Color.Green;
            }
        }

        private void text_reorder_Enter(object sender, EventArgs e)
        {
            if (text_reorder.Text == "0.00")
            {
                text_reorder.Text = "";
                text_reorder.ForeColor = Color.Green;
            }
        }

        private void text_reorder_Leave(object sender, EventArgs e)
        {
            if (text_reorder.Text == "")
            {
                text_reorder.Text = "0.00";
                text_reorder.ForeColor = Color.Green;
            }
        }

       

        private void b1_Click(object sender, EventArgs e)
        {
            //true
            lblPM.Text = "Product Maintenance";
            add_panel.Visible = true;
            psearch.Visible = true;
            tInventory.Visible = true;

            //false
            pdate.Visible = false;
            psettings.Visible = false;
            preports.Visible = false;
            pset.Visible = false;

        }

        private void b2_Click(object sender, EventArgs e)
        {
            //true
            lblPM.Text = "Reports";

            preports.Visible = true;
            pdate.Visible = true;
            add_panel.Visible = true;

            panel13.Visible = true;
            psearch.Visible = true;

            //false
            psettings.Visible = false;
            pset.Visible = false;
            
        }

        private void b3_Click(object sender, EventArgs e)
        {
            //true
            lblPM.Text = "Settings";
            preports.Visible = true;
            psettings.Visible = true;
            

            pdate.Visible = true;//
            add_panel.Visible = true;
            panel13.Visible = true;
            psearch.Visible = true;
            pset.Visible = true;

            //false




        }

        private void b4_Click(object sender, EventArgs e)
        {
            //true
            lblPM.Text = "About";
            
        }

        private void btnhome_Click(object sender, EventArgs e)
        {
            lblPM.Text = "HOME";             
            tInventory.Visible = false;  
            panel13.Visible = true;
            
            preports.Visible = false;
            psettings.Visible = false;
            pset.Visible = false;//
            pdate.Visible = false;//
            psearch.Visible = false;//

        }




        private void btnAddQty_Click(object sender, EventArgs e)
        {
            
        }

        
      
        private void bunifuFlatButton1_Click(object sender, EventArgs e)
        {
            slider.Left = ((Bunifu.Framework.UI.BunifuFlatButton)sender).Left;
            slider.Width = ((Bunifu.Framework.UI.BunifuFlatButton)sender).Width;

            panelCP.Visible = false;
            productset.Visible = false;
            tableLayoutPanel1.Visible = true;
        }

        private void bunifuFlatButton2_Click(object sender, EventArgs e)
        {
            slider.Left = ((Bunifu.Framework.UI.BunifuFlatButton)sender).Left;
            slider.Width = ((Bunifu.Framework.UI.BunifuFlatButton)sender).Width;

            //psettings.Visible = false;
            panelCP.Visible = true;
            productset.Visible = false;
        }

        private void bunifuFlatButton4_Click(object sender, EventArgs e)
        {
            slider.Left = ((Bunifu.Framework.UI.BunifuFlatButton)sender).Left;
            slider.Width = ((Bunifu.Framework.UI.BunifuFlatButton)sender).Width;

            tableLayoutPanel1.Visible = true;
            panelCP.Visible = true;
            productset.Visible = true;
            panel11.Visible = false;
        }

        private void Responsive_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Escape)
            {
                scape();
            }
                
        }

        private void csupplier_SelectedIndexChanged(object sender, EventArgs e)
        {
            
            
        }
               
       

        private void csupplier_SelectedValueChanged(object sender, EventArgs e)
        { 
        }

       
        private void tableLayoutPanel1_Paint(object sender, PaintEventArgs e)
        {

        }

        void welcome()
        {
            MessageBox.Show("Welcome Admin: " + Username.Text + " ", "GREETINGS", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        private void saveUser_Click(object sender, EventArgs e)
        {
            if (tusername.Text.Contains("blank") && tpassword.Text.Contains("blank") && tfn.Text.Contains("blank") && tmn.Text.Contains("blank") && tln.Text.Contains("blank") && ctitle.PromptText.Contains("--------------Select Title or Position-------------") && cgender.PromptText.Contains("Unknown"))
            {
                MessageBox.Show("Please input the given field(s)", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            else
            {

                if (MessageBox.Show("Do you want to save it now?", "SAVE", MessageBoxButtons.OKCancel, MessageBoxIcon.Information) == DialogResult.OK)
                {


                    //save the item
                    string insert = "INSERT INTO log (uid ,username ,password ,position)"
                    + "VALUES('" + tempid.Text + "', '" + tusername.Text + "', '" + tpassword.Text + "','" + ctitle.Text + "');";


                    string insert1 = "INSERT INTO " + ctitle.Text + " (emp_no ,username ,Firstname ,Middlename ,Lastname,  gender)"
                    + "VALUES('" + tempid.Text + "','" + tusername.Text + "', '" + tfn.Text + "', '" + tmn.Text + "','" + tln.Text + "', '" + cgender.Text + "');";
                    //connection.Open();


                    MySqlCommand Cmd1 = new MySqlCommand(insert1, connection);
                    Cmd = new MySqlCommand(insert, connection);


                    try
                    {
                       
                        if (Cmd.ExecuteNonQuery() == 1 && Cmd1.ExecuteNonQuery() == 1)
                        {
                            MessageBox.Show("data Saved!", "SAVE", MessageBoxButtons.OK, MessageBoxIcon.Information);

                            try
                            {



                                try
                                {
                                    Cmd = new MySqlCommand("SELECT max(uid)+1 FROM log", connection);
                                    tempid.Text = Cmd.ExecuteScalar().ToString();


                                    tusername.Text = "blank";
                                    tpassword.Text = "blank";
                                    tfn.Text = "blank";
                                    tmn.Text = "blank";
                                    tln.Text = "blank";
                                    ctitle.PromptText = "--------------Select Title or Position-------------";
                                    cgender.PromptText = "Unknown";
                                }
                                finally
                                {
                                    connection.Close();
                                }

                            }
                            finally
                            {
                                connection.Close();
                            }

                            clear();

                        }
                        else
                        {
                            MessageBox.Show("data is not Save!", "SAVE", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(ex.Message);
                    }


                    connection.Close();
                }
                else
                {
                    MessageBox.Show("User data is not save", "SAVE", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }

            }
        }

 

        private void tableLayoutPanel7_Paint(object sender, PaintEventArgs e)
        {

        }

       

        private void Blog_Click(object sender, EventArgs e)
        {
            password();
        }

        private void tpw_KeyDown(object sender, KeyEventArgs e)
        {

        }

        private void tun_KeyDown(object sender, KeyEventArgs e)
        {
            if (tpw.Text == null)
            {
                tpw.Text = "Enter old Password";
                tpw.ForeColor = Color.Silver;
            }


           
            if (e.KeyCode == Keys.Enter)
            {
                tpw.isPassword = true;
                tpw.Focus();
                tpw.Text = "";
            }
        }

        void password()
        {
            if (MessageBox.Show("Are you done?", "Question", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.OK)
            {
                string Username = tun.Text.Trim();
                string Password = tpw.Text.Trim();

                User user = new User();

                if (String.IsNullOrEmpty(Username) || String.IsNullOrEmpty(Password))
                {
                    MessageBox.Show("Please fill all given fields!");
                }
                else
                {
                    string position = null;
                    string pos_id = null;
                    //call function login
                    user = User.login(Username, Password, position, pos_id);



                    //if match
                    if (Username == user.username && Password == user.password)
                    {

                        if (user.position == "cashier")
                        {
                            getid.Text = user.pos_id;

                            string query1 = "SELECT * FROM cashier WHERE  emp_no=" + getid.Text + " ";
                            Cmd = new MySqlCommand(query1, connection);

                          //  connection.Open();

                            //execute reader
                            Reader = Cmd.ExecuteReader();

                            if (Reader.Read())
                            {
                                getid.Text = Reader.GetString("username").ToString();
                                MessageBox.Show("Correct Password!", "Information", MessageBoxButtons.OKCancel, MessageBoxIcon.Information);
                                panelpassword.Visible = false;
                                connection.Close();

                            }
                            else
                            {

                                MessageBox.Show("NO DATA FILL");
                            }
                            Reader.Close();

                            connection.Close();

                        }
                        else if (user.position == "admin")
                        {

                            getid.Text = user.pos_id;

                            string query1 = "SELECT * FROM admin WHERE  emp_no=" + getid.Text + " ";


                            Cmd = new MySqlCommand(query1, connection);

                           // connection.Open();

                            //execute reader
                            Reader = Cmd.ExecuteReader();

                            if (Reader.Read())
                            {
                                getid.Text = Reader.GetString("username").ToString();

                                MessageBox.Show("Correct Password!", "Information", MessageBoxButtons.RetryCancel, MessageBoxIcon.Information);
                                panelpassword.Visible = false;
                                connection.Close();
                            }
                            else
                            {

                                MessageBox.Show("NO DATA FILL");
                            }
                            Reader.Close();

                            connection.Close();


                        }
                                           

                    }
                    else
                    {
                        MessageBox.Show("Wrong Username or Password", "Wrong", MessageBoxButtons.RetryCancel, MessageBoxIcon.Error);
                    }
                }
            }
            else
            {
                MessageBox.Show("Okay, Double Check your new Password", "UPDATE", MessageBoxButtons.OK, MessageBoxIcon.Information);

            }
        }

        private void cshow_CheckedChanged(object sender, EventArgs e)
        {
            if (cshow.Checked == true)
            {
                tpw.isPassword = false;
            }
            else if (cshow.Checked == false)
            {
                tpw.isPassword = true;
            }
        }

        private void shownew_CheckedChanged(object sender, EventArgs e)
        {
            
        }


        void changePassword()
        {
            if (tnpw.Text == tcpw.Text)
            {
                try
                {
                    if(MessageBox.Show("Are you done?", "Question", MessageBoxButtons.OKCancel, MessageBoxIcon.Question)== DialogResult.OK)
                    {
                        string sql = "UPDATE log SET password='" + tnpw.Text + "'  WHERE username= '" + tun.Text + "'  ";

                        connection.Open();
                        Cmd = new MySqlCommand(sql, connection);


                        try
                        {
                            if (Cmd.ExecuteNonQuery() == 1)
                            {
                                MessageBox.Show("Password is now updated!", "UPDATE", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }
                            else
                            {
                                MessageBox.Show("data is not updated");
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show(ex.Message);
                        }

                        connection.Close();
                    }
                    else
                    {
                        MessageBox.Show("Okay, Double Check your new Password", "UPDATE", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                    



                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }



            }
            else
            {

                MessageBox.Show("Wrong Username or Password", "Wrong", MessageBoxButtons.RetryCancel, MessageBoxIcon.Error);
            }
        }
        private void savePassword_Click(object sender, EventArgs e)
        {

            changePassword();

        }

        private void tun_Enter(object sender, EventArgs e)
        {
            if (tun.Text == "Enter your Username")
            {
                tun.Text = "";
                tun.ForeColor = Color.Silver;
            }
        }

        private void tun_Leave(object sender, EventArgs e)
        {
            if (tun.Text == "")
            {
                tun.Text = "Enter your Username";
                tun.ForeColor = Color.Silver;
            }
        }

        private void tpw_Enter(object sender, EventArgs e)
        {
            if (tpw.Text == "Enter old Password")
            {
                tpw.Text = "";
                tpw.ForeColor = Color.Silver;
            }
        }

        private void tpw_Leave(object sender, EventArgs e)
        {
            if (tpw.Text == "")
            {
                tpw.Text = "Enter old Password";
                tpw.ForeColor = Color.Silver;
            }
        }

        private void tnpw_Enter(object sender, EventArgs e)
        {
            if (tnpw.Text == "Enter new Password")
            {
                tnpw.Text = "";
                tnpw.ForeColor = Color.Silver;
            }
        }

        private void tnpw_Leave(object sender, EventArgs e)
        {
            if (tnpw.Text == "")
            {
                tnpw.Text = "Enter new Password";
                tnpw.ForeColor = Color.Silver;
            }
        }

        private void tcpw_Enter(object sender, EventArgs e)
        {
            if (tcpw.Text == "Confirm new Password")
            {
                tcpw.Text = "";
                tcpw.ForeColor = Color.Silver;
            }
        }

        private void tcpw_Leave(object sender, EventArgs e)
        {
            if (tcpw.Text == "")
            {
                tcpw.Text = "Confirm new Password";
                tcpw.ForeColor = Color.Silver;
            }
        }

        private void tnpw_KeyDown(object sender, KeyEventArgs e)
        {
            if (tcpw.Text == null)
            {
                tcpw.Text = "Enter new Password";
                tcpw.ForeColor = Color.Silver;
            }



            if (e.KeyCode == Keys.Enter)
            {
                tcpw.isPassword = true;
                tcpw.Focus();
                tcpw.Text = "";
            }
        }

        private void tcpw_KeyDown(object sender, KeyEventArgs e)
        {
            if (tpw.Text == null)
            {
                tpw.Text = "Enter old Password";
                tpw.ForeColor = Color.Silver;
            }



            if (e.KeyCode == Keys.Enter)
            {
                changePassword();
            }
        }

        private void shownew_CheckStateChanged(object sender, EventArgs e)
        {
            if (shownew.Checked == true)
            {
                tnpw.isPassword = false;
                
            }
            else if (shownew.Checked == false)
            {
                tnpw.isPassword = true;
               
            }
        }

        private void tpw_KeyDown_1(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                password();
            }
        }

        private void fetch_Click(object sender, EventArgs e)
        {

            Cursor.Current = Cursors.WaitCursor;
            try
            {

                Adapter = new MySqlDataAdapter("SELECT * FROM transaction WHERE transaction_date BETWEEN '" + fromdate.Text + "' and '" + todate.Text + "' ;", connection);
                ds.Reset();
                Adapter.Fill(ds);

                LVreport.Items.Clear();

                if (ds.Tables[0].Rows.Count >0)
                {
                    for (int i = 0;i < ds.Tables[0].Rows.Count; i++)
                    {
                        LVreport.Items.Add(ds.Tables[0].Rows[i]["PO_id"].ToString());
                        LVreport.Items[LVreport.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["pro_id"].ToString());
                        LVreport.Items[LVreport.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["item"].ToString());
                        LVreport.Items[LVreport.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["qty"].ToString());
                        LVreport.Items[LVreport.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["cost"].ToString());

                        LVreport.Items[LVreport.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["discount_amt"].ToString());
                        LVreport.Items[LVreport.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["dispercent"].ToString());
                        LVreport.Items[LVreport.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["total"].ToString());
                        LVreport.Items[LVreport.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["subtotal"].ToString());

                        LVreport.Items[LVreport.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["cashier_name"].ToString());
                        LVreport.Items[LVreport.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["transaction_date"].ToString());

                    }

                    if (!System.IO.Directory.Exists(@"C:\ProgramData\Crystal_Report_Data_Source"))
                    {
                        System.IO.Directory.CreateDirectory(@"C:\ProgramData\Crystal_Report_Data_Source");
                    }

                    ds.WriteXml(@"C:\ProgramData\Crystal_Report_Data_Source\transaction.xml");
                }
                logtotal();
                
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }

            Adapter.Dispose();

            connection.Close();

             
        }

        
        double totalLog = 0;
        void logtotal()
        {
            double ColumnAvg = 0.00;

            for (int i = 0; i < LVreport.Items.Count; i++)
            {
                ColumnAvg += double.Parse(LVreport.Items[i].SubItems[3].Text);
            }

            totalLog = Convert.ToDouble(ColumnAvg.ToString());
        }


        private void btnprint_Click(object sender, EventArgs e)
        {
            if(totalLog == 0.00)
            {
                MessageBox.Show("Fetch the record first", "INFORMATION", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else
            {
                Cursor.Current = Cursors.WaitCursor;
                reportView prnt = new reportView();

                prnt.ShowDialog();
            }
            
        }

   
   
        void totalSales()
        {
            double ColumnAvg = 0.00;

            for (int i = 0; i < LVsales.Items.Count; i++)
            {
                ColumnAvg += double.Parse(LVsales.Items[i].SubItems[3].Text);
            }


            total_monthly.Text = ColumnAvg.ToString();
            
        }

        

        private void sprint_Click(object sender, EventArgs e)
        {
            if(total_monthly.Text == "0.00")
            {
                MessageBox.Show("Fetch the record first","INFORMATION", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else
            {
                Cursor.Current = Cursors.WaitCursor;
                reportSalesPrint sales = new reportSalesPrint(total_monthly.Text);

                sales.ShowDialog();
            }

        }

        private void btnfetch_Click(object sender, EventArgs e)
        {
            Cursor.Current = Cursors.WaitCursor;
            try
            {
             
                
                if(cb_category.Text== "IN PATIENT")
                {
                   // Adapter = new MySqlDataAdapter("SELECT product.prod_id ,prod_cat.item,  prod_cat.brand, prod_brand.unit, product.U_Cost, prod_brand.qty FROM product join prod_brand on prod_brand.brand_id = prod_id join prod_cat on prod_cat.cat_id = prod_id", connection);
                    Adapter = new MySqlDataAdapter("SELECT charge.invoice_no, sales_report.transactionNum, sales_report.totalqty, sales_report.total, sales_report.subtotal, sales_report.discpercent, sales_report.discount_amount ,sales_report.Date, sales_report.Time, sales_report.cashier FROM sales_report join charge on sales_report.transactionNum = charge.invoice_no  WHERE sales_report.Date BETWEEN '" + from.Text + "' and '" + to.Text + "' ;", connection);
                    ds.Reset();
                    Adapter.Fill(ds);

                    LVsales.Items.Clear();

                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                        {
                            LVsales.Items.Add(ds.Tables[0].Rows[i]["transactionNum"].ToString());
                            LVsales.Items[LVsales.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["totalqty"].ToString());
                            LVsales.Items[LVsales.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["total"].ToString());
                            LVsales.Items[LVsales.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["subtotal"].ToString());
                            LVsales.Items[LVsales.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["discpercent"].ToString());
                            LVsales.Items[LVsales.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["discount_amount"].ToString());
                            LVsales.Items[LVsales.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["Date"].ToString());
                            LVsales.Items[LVsales.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["Time"].ToString());
                            LVsales.Items[LVsales.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["cashier"].ToString());


                        }

                        if (!System.IO.Directory.Exists(@"C:\ProgramData\Crystal_Report_Data_Source"))
                        {
                            System.IO.Directory.CreateDirectory(@"C:\ProgramData\Crystal_Report_Data_Source");
                        }
                        ds.WriteXml(@"C:\ProgramData\Crystal_Report_Data_Source\sales.xml");
                    }
                    totalSales();

                    Double z;
                    Double.TryParse(total_monthly.Text, out z);
                    total_monthly.Text = z.ToString("0.00");
                    Adapter.Dispose();
                }
                else if(cb_category.Text == "OUT PATIENT")
                {
                    Adapter = new MySqlDataAdapter("SELECT * FROM sales_report WHERE Date BETWEEN '" + from.Text + "' and '" + to.Text + "' ;", connection);
                    ds.Reset();
                    Adapter.Fill(ds);

                    LVsales.Items.Clear();



                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                        {
                            LVsales.Items.Add(ds.Tables[0].Rows[i]["transactionNum"].ToString());
                            LVsales.Items[LVsales.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["totalqty"].ToString());
                            LVsales.Items[LVsales.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["total"].ToString());
                            LVsales.Items[LVsales.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["subtotal"].ToString());
                            LVsales.Items[LVsales.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["discpercent"].ToString());
                            LVsales.Items[LVsales.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["discount_amount"].ToString());
                            LVsales.Items[LVsales.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["Date"].ToString());
                            LVsales.Items[LVsales.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["Time"].ToString());
                            LVsales.Items[LVsales.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["cashier"].ToString());


                        }

                        if (!System.IO.Directory.Exists(@"C:\ProgramData\Crystal_Report_Data_Source"))
                        {
                            System.IO.Directory.CreateDirectory(@"C:\ProgramData\Crystal_Report_Data_Source");
                        }

                        ds.WriteXml(@"C:\ProgramData\Crystal_Report_Data_Source\sales.xml");
                    }
                    totalSales();

                    Double z;
                    Double.TryParse(total_monthly.Text, out z);
                    total_monthly.Text = z.ToString("0.00");
                    Adapter.Dispose();
                }
                else
                {
                    MessageBox.Show("Choose your sales category in combobox","INFORMATION", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                }

                

            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }

            

            connection.Close();
        }


        int totalrmed = 0;
        void rMed_total()
        {
            int ColumnAvg = 0;

            for (int i = 0; i < rlistview.Items.Count; i++)
            {
                ColumnAvg += int.Parse(rlistview.Items[i].SubItems[2].Text);
            }

            totalrmed = Convert.ToInt32(ColumnAvg.ToString());


        }

        private void btn_rprint_Click(object sender, EventArgs e)
        {
            if (totalrmed.Equals(0) )
            {
                MessageBox.Show("Fetch the record first", "INFORMATION", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else
            {
                Cursor.Current = Cursors.WaitCursor;
                returnedMedReport rptMED = new returnedMedReport();

                rptMED.ShowDialog();
                
            }

        }

        private void btn_rfetch_Click(object sender, EventArgs e)
        {
            Cursor.Current = Cursors.WaitCursor;
            try
            {

                Adapter = new MySqlDataAdapter("SELECT * FROM medicinelogreturn WHERE DateReturn BETWEEN '" + rfrom.Text + "' and '" + rto.Text + "' ;", connection);
                ds.Reset();
                Adapter.Fill(ds);

                rlistview.Items.Clear();

                if (ds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        rlistview.Items.Add(ds.Tables[0].Rows[i]["POnum"].ToString());
                        rlistview.Items[rlistview.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["Item"].ToString());
                        rlistview.Items[rlistview.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["qty"].ToString());
                        rlistview.Items[rlistview.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["Amount"].ToString());
                        rlistview.Items[rlistview.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["datePurchased"].ToString());
                        rlistview.Items[rlistview.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["DateReturn"].ToString());
                        rlistview.Items[rlistview.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["Incharge"].ToString());
                    }

                    if (!System.IO.Directory.Exists(@"C:\ProgramData\Crystal_Report_Data_Source"))
                    {
                        System.IO.Directory.CreateDirectory(@"C:\ProgramData\Crystal_Report_Data_Source");
                    }

                    ds.WriteXml(@"C:\ProgramData\Crystal_Report_Data_Source\recordmed.xml");
                }
                rMed_total();

            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }

            Adapter.Dispose();
            connection.Close();
        }

        //button for inventory medicine

        private void transact_Click(object sender, EventArgs e)
        {
            slider1.Left = ((Bunifu.Framework.UI.BunifuTileButton)sender).Left;
            slider1.Width = ((Bunifu.Framework.UI.BunifuTileButton)sender).Width;

            preports.Visible = true;
            p_rsales.Visible = false;
            p_returned_med.Visible = false;
        }

        private void rsales_Click(object sender, EventArgs e)
        {

            slider1.Left = ((Bunifu.Framework.UI.BunifuTileButton)sender).Left;
            slider1.Width = ((Bunifu.Framework.UI.BunifuTileButton)sender).Width;


            p_returned_med.Visible = false;
            p_rsales.Visible = true;
            

        }


        private void rreturn_Click(object sender, EventArgs e)
        {
            slider1.Left = ((Bunifu.Framework.UI.BunifuTileButton)sender).Left;
            slider1.Width = ((Bunifu.Framework.UI.BunifuTileButton)sender).Width;

            preports.Visible = true;
            p_rsales.Visible = true;
            p_returned_med.Visible = true;
            p_invmed.Visible = false;
            

        }

        private void rArStaff_Click(object sender, EventArgs e)
        {
            slider1.Left = ((Bunifu.Framework.UI.BunifuTileButton)sender).Left;
            slider1.Width = ((Bunifu.Framework.UI.BunifuTileButton)sender).Width;

            preports.Visible = true;
            p_rsales.Visible = true;
            p_returned_med.Visible = true;
            p_invmed.Visible = true;
            P_generatedLogs.Visible = true;
            p_medicine.Visible = false;

        }

        private void rexpired_Click(object sender, EventArgs e)
        {
            slider1.Left = ((Bunifu.Framework.UI.BunifuTileButton)sender).Left;
            slider1.Width = ((Bunifu.Framework.UI.BunifuTileButton)sender).Width;

            preports.Visible = true;
            p_rsales.Visible = true;
            p_returned_med.Visible = true;
            p_invmed.Visible = true;
            P_generatedLogs.Visible = true;
            p_medicine.Visible = true;
            p_expired.Visible = true;
        }

        private void rinventory_Click(object sender, EventArgs e)
        {
            slider1.Left = ((Bunifu.Framework.UI.BunifuTileButton)sender).Left;
            slider1.Width = ((Bunifu.Framework.UI.BunifuTileButton)sender).Width;

            preports.Visible = true;
            p_rsales.Visible = true;
            p_returned_med.Visible = true;
            p_invmed.Visible = true;
            P_generatedLogs.Visible = false;
        }

        private void bunifuTileButton1_Click(object sender, EventArgs e)
        {
            slider1.Left = ((Bunifu.Framework.UI.BunifuTileButton)sender).Left;
            slider1.Width = ((Bunifu.Framework.UI.BunifuTileButton)sender).Width;

            preports.Visible = true;
            p_rsales.Visible = true;
            p_returned_med.Visible = true;
            p_invmed.Visible = true;
            P_generatedLogs.Visible = true;
            p_medicine.Visible = true;
            p_expired.Visible = false;
        }


        private void tusername_KeyDown(object sender, KeyEventArgs e)
        {
            if (tusername.Text == null)
            {
                tusername.Text = "blank";
                 
            }
            

            if (e.KeyCode == Keys.Enter)
            {
                tpassword.Focus();
                tpassword.Text = "";
            }
        }

        private void tpassword_KeyDown(object sender, KeyEventArgs e)
        {
            if (tpassword.Text == null)
            {
                tpassword.Text = "blank";

            }


            if (e.KeyCode == Keys.Enter)
            {
                tfn.Focus();
                tfn.Text = "";
            }
        }

        private void tfn_KeyDown(object sender, KeyEventArgs e)
        {
            if (tfn.Text == null)
            {
                tfn.Text = "blank";

            }


            if (e.KeyCode == Keys.Enter)
            {
                tmn.Focus();
                tmn.Text = "";
            }
        }

        private void tmn_KeyDown(object sender, KeyEventArgs e)
        {
            if (tmn.Text == null)
            {
                tmn.Text = "blank";

            }


            if (e.KeyCode == Keys.Enter)
            {
                tln.Focus();
                tln.Text = "";
            }
        }

        private void tln_KeyDown(object sender, KeyEventArgs e)
        {
            if (tln.Text == null)
            {
                tln.Text = "blank";

            }


            if (e.KeyCode == Keys.Enter)
            {
                ctitle.Focus();
                //ctitle.DropDownStyle();
            }
        }

        private void tusername_Enter(object sender, EventArgs e)
        {
             
            if (tusername.Text == "blank")
            {
                tusername.Text = "";
                 
            }
        }

        private void tusername_Leave(object sender, EventArgs e)
        {
            if (tusername.Text == "")
            {
                tusername.Text = "blank";
                
            }
        }

        private void tpassword_Enter(object sender, EventArgs e)
        {
            tpassword.isPassword = true;


            if (tpassword.Text == "blank")
            {
                tpassword.Text = "";
                 
            }
        }

        private void tpassword_Leave(object sender, EventArgs e)
        {
            if (tpassword.Text == "")
            {
                tpassword.isPassword = false;
                tpassword.Text = "blank";
                
            }
        }

        private void tfn_Enter(object sender, EventArgs e)
        {
            if (tfn.Text == "blank")
            {
                tfn.Text = "";
                 
            }
        }

        private void tfn_Leave(object sender, EventArgs e)
        {
            if (tfn.Text == "")
            {
                tfn.Text = "blank";
                
            }
        }

        private void tmn_Enter(object sender, EventArgs e)
        {
            if (tmn.Text == "blank")
            {
                tmn.Text = "";
                
            }
        }

        private void tmn_Leave(object sender, EventArgs e)
        {
            if (tmn.Text == "")
            {
                tmn.Text = "blank";
                 
            }
        }

        private void tln_Enter(object sender, EventArgs e)
        {
            if (tln.Text == "blank")
            {
                tln.Text = "";
                
            }
        }

        private void tln_Leave(object sender, EventArgs e)
        {
            if (tln.Text == "")
            {
                tln.Text = "blank";
                 
            }
        }

        private void checkBox1_CheckedChanged(object sender, EventArgs e)
        {
            if (checkBox1.Checked == true)
            {
                tpassword.isPassword = false;
            }
            else if (checkBox1.Checked == false)
            {
                tpassword.isPassword = true;
            }
        }

        private void psup_Paint(object sender, PaintEventArgs e)
        {

        }

    
       

       

        private void UnitCost_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                text_reorder.Focus();
            }


        }


        string OrNum;
        private void OR_KeyDown(object sender, KeyEventArgs e)
        {
            connection.Close();
            if (e.KeyCode == Keys.Enter)
            {
                if (csupplier.Text == "select Supplier")
                {
                    MessageBox.Show("Select supplier category first","ERROR", MessageBoxButtons.OK, MessageBoxIcon.Stop);

                    tsupname.Enabled = false;
                    tb_req_no.Enabled = false;
                    supdate.Enabled = false;
                    
                    batchNo.Enabled = false;
                    item.Enabled = false;
                    ccat.Enabled = false;
                    cbrand.Enabled = false;
                    unit1.Enabled = false;
                    unit2.Enabled = false;
                    unit3.Enabled = false;
                    qty.Enabled = false;
                    UnitCost.Enabled = false;
                    text_reorder.Enabled = false;
                    Exdate.Enabled = false;
                    rb_active.Enabled = false;
                    rb_nActive.Enabled = false;
                    btn_save.Enabled = false;
                }
                else
                {
                    try
                    {
                        string sql = "SELECT * FROM " + csupplier.Text + " WHERE purchaseNo = " + OR.Text + " ";
                        Cmd = new MySqlCommand(sql, connection);

                        connection.Open();
                        //execute reader
                        Reader = Cmd.ExecuteReader();

                        if (Reader.Read())
                        {
                            OrNum = Reader.GetString("purchaseNo");

                            MessageBox.Show("The batch No. " + OrNum + " is already have, Please give a unique batch number", "STOP", MessageBoxButtons.OKCancel, MessageBoxIcon.Information);

                            tsupname.Enabled = false;
                            tb_req_no.Enabled = false;
                            supdate.Enabled = false;
                            
                            batchNo.Enabled = false;
                            item.Enabled = false;
                            ccat.Enabled = false;
                            cbrand.Enabled = false;
                            unit1.Enabled = false;
                            unit2.Enabled = false;
                            unit3.Enabled = false;
                            qty.Enabled = false;
                            UnitCost.Enabled = false;
                            text_reorder.Enabled = false;
                            Exdate.Enabled = false;
                            rb_active.Enabled = false;
                            rb_nActive.Enabled = false;
                            btn_save.Enabled = false;
                        }
                        else
                        {

                            //MessageBox.Show("NO DATA FILL");

                            tsupname.Enabled = true;
                            tb_req_no.Enabled = true;
                            supdate.Enabled = true;
                            
                            batchNo.Enabled = true;
                            item.Enabled = true;
                            ccat.Enabled = true;
                            cbrand.Enabled = true;
                            unit1.Enabled = true;
                            unit2.Enabled = true;
                            unit3.Enabled = true;
                            qty.Enabled = true;
                            UnitCost.Enabled = true;
                            text_reorder.Enabled = true;
                            Exdate.Enabled = true;
                            rb_active.Enabled = true;
                            rb_nActive.Enabled = true;
                            btn_save.Enabled = true;

                            if (e.KeyCode == Keys.Enter)
                            {
                                tsupname.Focus();
                            }
                        }
                        Reader.Close();

                        connection.Close();
                    
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show("Please try numeric");
                    }

                }
            }
            
        }

        private void csupplier_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                tsupname.Focus();
             }
        }

        private void tsupname_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                tb_req_no.Focus();
            }
        }

        private void tb_req_no_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                supdate.Focus();
            }
        }

        private void supdate_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                batchNo.Focus();
            }
        }

    

        private void batchNo_KeyDown(object sender, KeyEventArgs e)
        {

            if (e.KeyCode == Keys.Enter)
            {
                item.Focus();
            }
            
        }

        private void item_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                ccat.Focus();
            }
        }

        private void ccat_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                cbrand.Focus();
            }
        }

        private void cbrand_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                qty.Focus();
            }
        }

        private void qty_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                UnitCost.Focus();
            }
        }

        private void text_reorder_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                Exdate.Focus();
            }
        }

        private void P_id_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                Exdate.Focus();
            }
        }

        private void cb_category_SelectedIndexChanged(object sender, EventArgs e)
        {
            LVsales.Items.Clear();
            total_monthly.Text = "0.00";
        }

   


        

        private void tsupname_Enter(object sender, EventArgs e)
        {
            connection.Close();
            if (csupplier.Text == "select Supplier")
            {
                MessageBox.Show("Select supplier category first", "ERROR", MessageBoxButtons.OK, MessageBoxIcon.Stop);

                tsupname.Enabled = false;
                tb_req_no.Enabled = false;
                supdate.Enabled = false;
               
                batchNo.Enabled = false;
                item.Enabled = false;
                ccat.Enabled = false;
                cbrand.Enabled = false;
                unit1.Enabled = false;
                unit2.Enabled = false;
                unit3.Enabled = false;
                qty.Enabled = false;
                UnitCost.Enabled = false;
                text_reorder.Enabled = false;
                Exdate.Enabled = false;
                rb_active.Enabled = false;
                rb_nActive.Enabled = false;
                btn_save.Enabled = false;
            }
            else
            {
                try
                {
                    string sql = "SELECT * FROM " + csupplier.Text + " WHERE purchaseNo = " + OR.Text + " ";
                    Cmd = new MySqlCommand(sql, connection);

                    connection.Open();
                    //execute reader
                    Reader = Cmd.ExecuteReader();

                    if (Reader.Read())
                    {
                        OrNum = Reader.GetString("purchaseNo");

                        MessageBox.Show("The batch No. " + OrNum + " is already have, Please give a unique batch number", "STOP", MessageBoxButtons.OKCancel, MessageBoxIcon.Information);

                        tsupname.Enabled = false;
                        tb_req_no.Enabled = false;
                        supdate.Enabled = false;
                        
                        batchNo.Enabled = false;
                        item.Enabled = false;
                        ccat.Enabled = false;
                        cbrand.Enabled = false;
                        unit1.Enabled = false;
                        unit2.Enabled = false;
                        unit3.Enabled = false;
                        qty.Enabled = false;
                        UnitCost.Enabled = false;
                        text_reorder.Enabled = false;
                        Exdate.Enabled = false;
                        rb_active.Enabled = false;
                        rb_nActive.Enabled = false;
                        btn_save.Enabled = false;
                    }
                    else
                    {

                        //MessageBox.Show("NO DATA FILL");

                        tsupname.Enabled = true;
                        tb_req_no.Enabled = true;
                        supdate.Enabled = true;
                       
                        batchNo.Enabled = true;
                        item.Enabled = true;
                        ccat.Enabled = true;
                        cbrand.Enabled = true;
                        unit1.Enabled = true;
                        unit2.Enabled = true;
                        unit3.Enabled = true;
                        qty.Enabled = true;
                        UnitCost.Enabled = true;
                        text_reorder.Enabled = true;
                        Exdate.Enabled = true;
                        rb_active.Enabled = true;
                        rb_nActive.Enabled = true;
                        btn_save.Enabled = true;


                    }
                    Reader.Close();

                    connection.Close();
                }
                catch (Exception ex)
                {
                    //MessageBox.Show(ex.Message);
                    MessageBox.Show("Please try numeric");
                }
            }
                
            
        }

        void fillcombo()
        {
            Cmd = new MySqlCommand("SELECT DISTINCT batchNo from drug_logs ORDER BY ItemID", connection);


            try
            {
                connection.Open();
                Reader = Cmd.ExecuteReader();


                while (Reader.Read())
                {
                    string sid = Reader.GetString("batchNo");
                    cb_batchno.Items.Add(sid);

                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            connection.Close();
        }

       

        private void PMfetchbtn_Click_1(object sender, EventArgs e)
        {
            if (cb_batchno.Text == "----BATCH----")
            {
                MessageBox.Show("Choose the right batch you want to generate","STOP",MessageBoxButtons.OK,MessageBoxIcon.Stop);
            }
            else
            {
                Cursor.Current = Cursors.WaitCursor;
                try
                {
                    // FROM product join prod_brand on prod_brand.brand_id = prod_id join prod_cat on prod_cat.cat_id = prod_id WHERE prod_cat.item LIKE '" + tb_search.Text + "' ";                                                                     
                    Adapter = new MySqlDataAdapter("SELECT drug_logs.ItemID, drug_logs.ItemName, drug_logs.stockQty1, drug_consume.stockQty2, drug.stockQty FROM drug_logs join drug_consume on drug_consume.ItemID = drug_logs.ItemID join drug on drug.ItemID = drug_logs.ItemID WHERE drug_logs.batchNo Like '" + cb_batchno.Text + "';", connection);
                    ds.Reset();
                    Adapter.Fill(ds);

                    PMLV.Items.Clear();

                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                        {
                            PMLV.Items.Add(ds.Tables[0].Rows[i]["ItemID"].ToString());
                            PMLV.Items[PMLV.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["ItemName"].ToString());
                            PMLV.Items[PMLV.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["stockQty1"].ToString());
                            PMLV.Items[PMLV.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["stockQty2"].ToString());
                            PMLV.Items[PMLV.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["stockQty"].ToString());

                        }

                        if (!System.IO.Directory.Exists(@"C:\ProgramData\Crystal_Report_Data_Source"))
                        {
                            System.IO.Directory.CreateDirectory(@"C:\ProgramData\Crystal_Report_Data_Source");
                        }

                        ds.WriteXml(@"C:\ProgramData\Crystal_Report_Data_Source\inventoryMED.xml");
                    }
                    
                    Inventorymed_total();

                }
                catch (Exception ex)
                {

                    MessageBox.Show(ex.Message);
                }

                Adapter.Dispose();

                connection.Close();
            }
        }

        private void cb_batchno_SelectedIndexChanged_1(object sender, EventArgs e)
        {
            PMLV.Items.Clear();
            stock_IM = 0;
        }

        int stock_IM = 0;
        void Inventorymed_total()
        {
            int ColumnAvg = 0;

            for (int i = 0; i < PMLV.Items.Count; i++)
            {
                ColumnAvg += int.Parse(PMLV.Items[i].SubItems[2].Text);
            }

            stock_IM = Convert.ToInt32(ColumnAvg.ToString());
            
        }

        int mlid;
        string iname;
        int MLstock = 0;
        int outmedstock = 0;
        int lefmedstock = 0;
        int lefmedstock1 = 0;

        private void btn_PMprint_Click(object sender, EventArgs e)
        {
            if(stock_IM == 0)
            {
                MessageBox.Show("Fetch the report first, before print it","INFORMATION",MessageBoxButtons.OK,MessageBoxIcon.Stop);
            }
            else
            {
                
                if(MessageBox.Show("Before Print the report Pls. Review it, Because this reports will transfer to another logs, CONTINUE?", "INFORMATION", MessageBoxButtons.YesNo, MessageBoxIcon.Question)==DialogResult.Yes)
                {

                            for (int i = 0; i < PMLV.Items.Count; i++)
                            {
                                // ConsumeItem();
                                mlid = Convert.ToInt32(PMLV.Items[i].SubItems[0].Text);//ok
                                iname = Convert.ToString(PMLV.Items[i].SubItems[1].Text);//ok
                                MLstock = Convert.ToInt32(PMLV.Items[i].SubItems[2].Text);//ok
                                outmedstock = Convert.ToInt32(PMLV.Items[i].SubItems[3].Text);//ok
                                lefmedstock = Convert.ToInt32(PMLV.Items[i].SubItems[4].Text);


                                connection.Open();

                                string insert = "INSERT INTO med_logs (ItemID, batchNo ,ItemName, stock, outMed, ending, dategenerated)"
                                + "VALUES('" + mlid + "','" + cb_batchno.Text + "', '" + iname + "', '" + MLstock + "', '" + outmedstock + "', '" + lefmedstock + "', '" + dateforIM.Text + "');";

                                Cmd = new MySqlCommand(insert, connection);

                                try
                                {
                                    if (Cmd.ExecuteNonQuery() == 1)
                                    {
                                        //MessageBox.Show("data is Saved");

                                                //query for beggining stocks
                                                connection.Close();

                                                string sql1 = "UPDATE drug_consume SET stockQty2='" + 0 + "'  WHERE ItemID=" + mlid + " && batchNo=" + cb_batchno.Text + " ";

                                                string sql3 = "UPDATE drug_logs SET stockQty1='" + lefmedstock + "'  WHERE ItemID=" + mlid + " && batchNo=" + cb_batchno.Text + " ";

                                                connection.Open();

                                                Cmd = new MySqlCommand(sql1, connection);
                                                MySqlCommand Cmd2 = new MySqlCommand(sql3, connection);

                                                try
                                                {
                                                    if (Cmd.ExecuteNonQuery() == 1 && Cmd2.ExecuteNonQuery() == 1)
                                                    {
                                                       // MessageBox.Show("data is now updated");
                                                    }
                                                    else
                                                    {
                                                       // MessageBox.Show("data is not updated");
                                                    }
                                                }
                                                catch (Exception ex)
                                                {
                                                    MessageBox.Show(ex.Message);
                                                }
                                                connection.Close();
                                                 }

                                }
                                catch (Exception ex)
                                {
                                    MessageBox.Show(ex.Message);
                                    connection.Close();
                                }

                                connection.Close();

                            




                    }

                    MessageBox.Show("data is Saved");

                    Cursor.Current = Cursors.WaitCursor;
                    InventoryMedicinePrint rptMED = new InventoryMedicinePrint();

                    rptMED.ShowDialog();

                    cb_batchGL.Items.Clear();

                    fillcombo();
                    fillcomboToGL();

                }
                else
                {
                    MessageBox.Show("The generated report will not save", "INFORMATION", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                connection.Close();
            }
        }


        void fillcomboToGL()
        {
            Cmd = new MySqlCommand("SELECT DISTINCT batchNo from med_logs ORDER BY ItemID", connection);


            try
            {
                connection.Open();
                Reader = Cmd.ExecuteReader();


                while (Reader.Read())
                {
                    string sid = Reader.GetString("batchNo");
                    cb_batchGL.Items.Add(sid);

                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            connection.Close();
        }

        private void btn_fetchrecordGL_Click(object sender, EventArgs e)
        {
            if (cb_batchGL.Text == "----BATCH----")
            {
                MessageBox.Show("Choose the right batch you want to generate", "STOP", MessageBoxButtons.OK, MessageBoxIcon.Stop);
            }
            else
            {
                Cursor.Current = Cursors.WaitCursor;
                try
                {
                    // FROM product join prod_brand on prod_brand.brand_id = prod_id join prod_cat on prod_cat.cat_id = prod_id WHERE prod_cat.item LIKE '" + tb_search.Text + "' ";                                                                     
                    //Adapter = new MySqlDataAdapter("SELECT drug_logs.ItemID, drug_logs.ItemName, drug_logs.stockQty1, drug_consume.stockQty2, drug.stockQty FROM drug_logs join drug_consume on drug_consume.ItemID = drug_logs.ItemID join drug on drug.ItemID = drug_logs.ItemID WHERE drug_logs.batchNo Like '" + cb_batchno.Text + "';", connection);

                    //Adapter = new MySqlDataAdapter("SELECT * FROM medicinelogreturn WHERE DateReturn BETWEEN '" + rfrom.Text + "' and '" + rto.Text + "' ;", connection);
                    Adapter = new MySqlDataAdapter("SELECT * FROM med_logs WHERE batchNo="+ cb_batchGL.Text + " && dategenerated BETWEEN '" + GLfromdate.Text + "' and '" + GLtodate.Text + "' ;", connection);
                    ds.Reset();
                    Adapter.Fill(ds);

                    GLLV.Items.Clear();

                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                        {
                            GLLV.Items.Add(ds.Tables[0].Rows[i]["ItemID"].ToString());
                            GLLV.Items[GLLV.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["stock"].ToString());
                            GLLV.Items[GLLV.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["outMed"].ToString());
                            GLLV.Items[GLLV.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["ending"].ToString());
                            GLLV.Items[GLLV.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["batchNo"].ToString());

                        }

                        //if (!System.IO.Directory.Exists(@"C:\ProgramData\Crystal_Report_Data_Source"))
                        //{
                        //    System.IO.Directory.CreateDirectory(@"C:\ProgramData\Crystal_Report_Data_Source");
                        //}

                        //ds.WriteXml(@"C:\ProgramData\Crystal_Report_Data_Source\inventoryMED.xml");
                    }

                    //Inventorymed_total();

                }
                catch (Exception ex)
                {

                    MessageBox.Show(ex.Message);
                }

                Adapter.Dispose();

                connection.Close();
            }
        }

        private void cb_batchGL_SelectedIndexChanged(object sender, EventArgs e)
        {
            GLLV.Items.Clear();
        }


        void autoComplete1()
        {
            tb_medicinesearch.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
            tb_medicinesearch.AutoCompleteSource = AutoCompleteSource.CustomSource;
            AutoCompleteStringCollection colll = new AutoCompleteStringCollection();

            try
            {
                string sql = "SELECT * FROM drug_product";
                Cmd = new MySqlCommand(sql, connection);
                connection.Open();

                Reader = Cmd.ExecuteReader();

                while (Reader.Read())
                {

                    string item2 = Reader.GetString("ItemName");
                    colll.Add(item2);

                }

                connection.Close();

            }
            catch
            {

            }
            tb_medicinesearch.AutoCompleteCustomSource = colll;
        }

        private void getDrug(String id, String name, String unit, String ucost, String stock, String batchNO, String reqNo)
        {
            String[] row = { id, name,  unit, ucost, stock, batchNO, reqNo };

            ListViewItem item = new ListViewItem(row);

            LVmedicine.Items.Add(item);

        }

        private void GenerateData()
        {
            //  string sql = "SELECT product.prod_id ,prod_cat.item,  prod_cat.brand, prod_brand.unit, product.U_Cost, prod_brand.qty FROM product join prod_brand on prod_brand.brand_id = prod_id join prod_cat on prod_cat.cat_id = prod_id";
            string sql = "SELECT  ItemID, ItemName, unit, price, stockQty, batchNo, reqNo FROM drug_product";
            //string sql = "SELECT ItemID, ItemName, brand, unit, TRUNCATE(price, 2) as price ,stockQty, bathNo FROM drug";
            Cmd = new MySqlCommand(sql, connection);

            try
            {
                connection.Close();
                connection.Open();
                Adapter = new MySqlDataAdapter(Cmd);
                Adapter.Fill(dt);

                foreach (DataRow row in dt.Rows)
                {
                    getDrug(row[0].ToString(), row[1].ToString(), row[2].ToString(), row[3].ToString(), row[4].ToString(), row[5].ToString(), row[6].ToString());
                }
                connection.Close();

                dt.Rows.Clear();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
                connection.Close();
            }

        }

        private void LVmedicine_MouseClick(object sender, MouseEventArgs e)
        {

        }

        private void tb_medicinesearch_Enter(object sender, EventArgs e)
        {
            if (tb_medicinesearch.Text == "search item")
            {
                tb_medicinesearch.Text = "";
                tb_medicinesearch.ForeColor = Color.Green;
            }
        }

        private void tb_medicinesearch_Leave(object sender, EventArgs e)
        {
            if (tb_medicinesearch.Text == "")
            {
                tb_medicinesearch.Text = "search item";
                tb_medicinesearch.ForeColor = Color.Green;

                LVmedicine.Items.Clear();
                GenerateData();
            }

            

        }

        int drugID;
        int bno;
        private void LVmedicine_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            P_EDIT.BringToFront();

            tbnewprice.Focus();


            drugID = Convert.ToInt32(LVmedicine.SelectedItems[0].SubItems[0].Text);
            tbitemname.Text = LVmedicine.SelectedItems[0].SubItems[1].Text;

            bno = Convert.ToInt32(LVmedicine.SelectedItems[0].SubItems[5].Text);
            // textBrand.Text = LVmedicine.SelectedItems[0].SubItems[2].Text;
            //textUnit.Text = LVmedicine.SelectedItems[0].SubItems[3].Text;
            tboldprice.Text = LVmedicine.SelectedItems[0].SubItems[3].Text;
           // textStock.Text = LVmedicine.SelectedItems[0].SubItems[5].Text;

        }

        private void toolTip1_Popup(object sender, PopupEventArgs e)
        {
            P_EDIT.BringToFront();
        }

        private void tb_medicinesearch_KeyDown(object sender, KeyEventArgs e)
        {
            if(e.KeyCode == Keys.Enter)
            {
                try
                {

                    // MySqlCommand command = new MySqlCommand();
                    connection.Close();

                    connection.Open();

                    Cmd = new MySqlCommand();

                    Cmd.Connection = connection;

                    // SELECT ItemID, ItemName, unit, price, stockQty, batchNo, reqNo FROM drug_product
                    Cmd.CommandText = "SELECT ItemID, ItemName, unit, price, stockQty, batchNo, reqNo FROM drug_product WHERE ItemName LIKE '%" + tb_medicinesearch.Text + "%' ";

                    Adapter = new MySqlDataAdapter();

                    Adapter.SelectCommand = Cmd;

                    dt = new DataTable();

                    Adapter.Fill(dt);

                    LVmedicine.Items.Clear();
                    foreach (DataRow r in dt.Rows)
                    {

                        ListViewItem list = LVmedicine.Items.Add(r["ItemID"].ToString());
                        list.SubItems.Add(r["ItemName"].ToString());
                        list.SubItems.Add(r["unit"].ToString());
                        list.SubItems.Add(r["price"].ToString());
                        list.SubItems.Add(r["stockQty"].ToString());
                        list.SubItems.Add(r["batchNo"].ToString());
                        list.SubItems.Add(r["reqNo"].ToString());

                    }
                }
                catch (Exception ex)
                {

                    MessageBox.Show(ex.Message);
                }

                Adapter.Dispose();

                connection.Close();
            }
        }

        private void btnclose_Click(object sender, EventArgs e)
        {
            P_EDIT.SendToBack();
        }

        private void tbnewprice_Enter(object sender, EventArgs e)
        {
            if (tbnewprice.Text == "0.00")
            {
                tbnewprice.Text = "";
                tbnewprice.ForeColor = Color.Green;
            }
        }

        private void tbnewprice_Leave(object sender, EventArgs e)
        {
            if (tbnewprice.Text == "")
            {
                tbnewprice.Text = "0.00";
                tbnewprice.ForeColor = Color.Green;
            }
        }

        private void tbnewprice_KeyDown(object sender, KeyEventArgs e)
        {
            if(e.KeyCode== Keys.Enter)
            {
                if (tbnewprice.Text == "")
                {
                    MessageBox.Show("The reprice field is empty", "SORRY", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                }
                else
                {
                    connection.Close();

                    string sql1 = "UPDATE drug_product SET price='" + tbnewprice.Text + "'  WHERE ItemID=" + drugID + " && batchNo=" + bno + " ";

                    string sql2 = "UPDATE drug_consume SET price='" + tbnewprice.Text + "'  WHERE ItemID=" + drugID + " && batchNo=" + bno + " ";

                    string sql3 = "UPDATE drug SET price='" + tbnewprice.Text + "'  WHERE ItemID=" + drugID + " && batchNo=" + bno + " ";


                    connection.Open();

                    Cmd = new MySqlCommand(sql1, connection);
                    MySqlCommand Cmd1 = new MySqlCommand(sql1, connection);
                    MySqlCommand Cmd2 = new MySqlCommand(sql1, connection);

                    try
                    {
                        if (Cmd.ExecuteNonQuery() == 1 && Cmd1.ExecuteNonQuery() == 1 && Cmd2.ExecuteNonQuery() == 1)
                        {
                            MessageBox.Show("Price of " + tbitemname.Text + " is now updated");
                            P_EDIT.SendToBack();
                            LVmedicine.Items.Clear();
                            GenerateData();
                            tbnewprice.Focus();
                            tbnewprice.Text = "0.00";
                        }
                        else
                        {
                            //  MessageBox.Show("data is not updated");
                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(ex.Message);
                    }


                    connection.Close();
                }
            }

            
        }

        private void btndel_Click(object sender, EventArgs e)
        {
            if (tbnewprice.Text == "")
            {
                MessageBox.Show("The reprice field is empty","SORRY", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            }
            else
            {
                connection.Close();

                string sql1 = "UPDATE drug_product SET price='" + tbnewprice.Text + "'  WHERE ItemID=" + drugID + " && batchNo=" + bno + " ";

                string sql2 = "UPDATE drug_consume SET price='" + tbnewprice.Text + "'  WHERE ItemID=" + drugID + " && batchNo=" + bno + " ";

                string sql3 = "UPDATE drug SET price='" + tbnewprice.Text + "'  WHERE ItemID=" + drugID + " && batchNo=" + bno + " ";


                connection.Open();

                Cmd = new MySqlCommand(sql1, connection);
                MySqlCommand Cmd1 = new MySqlCommand(sql2, connection);
                MySqlCommand Cmd2 = new MySqlCommand(sql3, connection);

                try
                {
                    if (Cmd.ExecuteNonQuery() == 1 && Cmd1.ExecuteNonQuery() == 1 && Cmd2.ExecuteNonQuery() == 1)
                    {
                        MessageBox.Show("Price of " + tbitemname.Text + " is now updated");
                        P_EDIT.SendToBack();
                        LVmedicine.Items.Clear();
                        GenerateData();
                        tbnewprice.Focus();
                        tbnewprice.Text = "0.00";
                    }
                    else
                    {
                        //  MessageBox.Show("data is not updated");
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }


                connection.Close();
            }

            
        }

        private void tb_medicinesearch_TextChanged(object sender, EventArgs e)
        {
            try
            {

                // MySqlCommand command = new MySqlCommand();
                connection.Close();

                connection.Open();

                Cmd = new MySqlCommand();

                Cmd.Connection = connection;

               // SELECT ItemID, ItemName, unit, price, stockQty, batchNo, reqNo FROM drug_product
                Cmd.CommandText = "SELECT ItemID, ItemName, unit, price, stockQty, batchNo, reqNo FROM drug_product WHERE ItemName LIKE '%" + tb_medicinesearch.Text + "%' ";

                Adapter = new MySqlDataAdapter();

                Adapter.SelectCommand = Cmd;

                dt = new DataTable();

                Adapter.Fill(dt);

                LVmedicine.Items.Clear();
                foreach (DataRow r in dt.Rows)
                {

                    ListViewItem list = LVmedicine.Items.Add(r["ItemID"].ToString());
                    list.SubItems.Add(r["ItemName"].ToString());
                    list.SubItems.Add(r["unit"].ToString());
                    list.SubItems.Add(r["price"].ToString());
                    list.SubItems.Add(r["stockQty"].ToString());
                    list.SubItems.Add(r["batchNo"].ToString());
                    list.SubItems.Add(r["reqNo"].ToString());

                }
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }

            Adapter.Dispose();

            connection.Close();
        }


        void fillcomboToEXP()
        {
            Cmd = new MySqlCommand("SELECT DISTINCT batchNo from drug_product ORDER BY ItemID", connection);


            try
            {
                connection.Open();
                Reader = Cmd.ExecuteReader();


                while (Reader.Read())
                {
                    string sid = Reader.GetString("batchNo");
                    cb_expBatch.Items.Add(sid);

                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            connection.Close();
        }

        

        
        void fillcomboToEXPdate()
        {
            Cmd = new MySqlCommand("SELECT DISTINCT beforeExp from drug_product where ItemID && batchNo ='" + cb_expBatch.Text+"' ", connection);


            try
            {
                connection.Open();
                Reader = Cmd.ExecuteReader();


                while (Reader.Read())
                {
                                       
                    string sid = Reader.GetDateTime("beforeExp").ToShortDateString();

                    string sourceDateText = sid;
                    DateTime sourceDate = DateTime.Parse(sourceDateText);
                    string formatted = sourceDate.ToString("yyyy-MM-dd");



                    cb_dateExp.Items.Add(formatted);

                    //select convert(varchar, getdate(), 111)
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            connection.Close();
        }

        private void cb_expBatch_SelectedIndexChanged(object sender, EventArgs e)
        {
            fillcomboToEXPdate();
            LVEXP.Items.Clear();
            cb_dateExp.Items.Clear();
            fillcomboToEXPdate();
            LVLogs.Items.Clear(); 
        }

        private void bunifuFlatButton3_Click(object sender, EventArgs e)
        {
            if(cb_expBatch.Text.Contains("----BATCH----") && cb_dateExp.Text.Contains("DATE") )
            {
                MessageBox.Show("choose batch and expired date","", MessageBoxButtons.OK, MessageBoxIcon.Stop);
            }
            else
            {
                if (cb_dateExp.Text == "DATE")
                {
                    MessageBox.Show("choose batch and expired date", "", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                }
                else
                {
                    Cursor.Current = Cursors.WaitCursor;
                    try
                    {
                        
                        Adapter = new MySqlDataAdapter("SELECT * FROM drug_product WHERE batchNo='"+ cb_expBatch.Text +"' && beforeExp ='" + cb_dateExp.Text + "' ;", connection);
                        ds.Reset();
                        Adapter.Fill(ds);

                        LVEXP.Items.Clear();
                                               
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                            {
                                LVEXP.Items.Add(ds.Tables[0].Rows[i]["ItemID"].ToString());
                                LVEXP.Items[LVEXP.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["ItemName"].ToString());
                                LVEXP.Items[LVEXP.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["batchNo"].ToString());
                                LVEXP.Items[LVEXP.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["expDate"].ToString());
                                LVEXP.Items[LVEXP.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["unit"].ToString());
                                LVEXP.Items[LVEXP.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["price"].ToString());
                                LVEXP.Items[LVEXP.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["stockQty"].ToString());
                            }

                            expiredNow();
                        }

                        
                    }
                    catch (Exception ex)
                    {

                        MessageBox.Show(ex.Message);
                    }

                    Adapter.Dispose();

                    connection.Close();
                }
            }
        }


        void MessageBoxNotif()
        {
            connection.Open();
            Cmd = new MySqlCommand("SELECT * from drug_product where beforeExp ='" + atime + "' ", connection);

            string sid;
            try
            {
                
                Reader = Cmd.ExecuteReader();
                
                while (Reader.Read())
                {

                    sid = Reader.GetString("ItemName");
                    //cb_batchno.Items.Add(sid);
                    //MessageBox.Show("The medicine " + sid + " is expired!", "", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    notifyIcon1.Visible = true;
                    notifyIcon1.BalloonTipText = "There is an expired medicine";
                    notifyIcon1.ShowBalloonTip(1000);                    
                    notifyIcon1.BalloonTipTitle = "EXPIRED";
                }
                connection.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }
        //EXPIRATION DAY
        string atime;
        
        void fillNotification()
        {

            DateTime date = DateTime.Now;
            string MySQLFormatDate = date.ToString("yyyy-MM-dd");
            atime = MySQLFormatDate.ToString();

            try
            {
                connection.Close();

                Adapter = new MySqlDataAdapter("SELECT * from drug_product where beforeExp ='" + atime + "' ", connection);
                ds.Reset();
                Adapter.Fill(ds);

                LVnotification.Items.Clear();

                if (ds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        LVnotification.Items.Add(ds.Tables[0].Rows[i]["ItemName"].ToString());
                        LVnotification.Items[LVnotification.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["unit"].ToString());
                        LVnotification.Items[LVnotification.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["batchNo"].ToString());
                   
                    }

                    
                    connection.Close();

                    

                    //int cnt = 0;

                    for (int x = 0; x < ds.Tables[0].Rows.Count; x++)
                    {
                        int y;
                        

                        if (x < 0)
                        {

                        }
                        else
                        {
                            y = x + 1;
                            lblBadge.Text = Convert.ToString(y);
                            lblBadge.Visible = true;
                        }


                        //cnt++;

                    }



                }

                //Inventorymed_total();

            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }

            Adapter.Dispose();

            connection.Close();
        }
    


        private void bunifuMetroTextbox2_OnValueChanged(object sender, EventArgs e)
        {

        }

        private void comboBox4_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void tb_or_KeyDown(object sender, KeyEventArgs e)
        {
            connection.Close();
            if (e.KeyCode == Keys.Enter)
            {
                if (cb_sup.Text == "select Supplier")
                {
                    MessageBox.Show("Select supplier category first", "ERROR", MessageBoxButtons.OK, MessageBoxIcon.Stop);

                    tb_supfrom.Enabled = false;
                    tb_reqno.Enabled = false;
                    dp_dd.Enabled = false;

                    tb_batchno.Enabled = false;
                    tb_item.Enabled = false;
                    cb_cat.Enabled = false;
                    cb_brandd.Enabled = false;
                    u1.Enabled = false;
                    u2.Enabled = false;
                    u3.Enabled = false;
                    tb_qty.Enabled = false;
                    tb_cost.Enabled = false;
                    tb_reOrder.Enabled = false;
                    dp_ed.Enabled = false;
                    rdactive.Enabled = false;
                    btn_update.Enabled = false;
                }
                else
                {
                    try
                    {
                        string sql = "SELECT * FROM " + cb_sup.Text + " WHERE purchaseNo = " + tb_or.Text + " ";
                        Cmd = new MySqlCommand(sql, connection);

                        connection.Open();
                        //execute reader
                        Reader = Cmd.ExecuteReader();

                        if (Reader.Read())
                        {
                            OrNum = Reader.GetString("purchaseNo");

                            MessageBox.Show("The batch No. " + OrNum + " is already have, Please give a unique batch number", "STOP", MessageBoxButtons.OKCancel, MessageBoxIcon.Information);

                            tb_supfrom.Enabled = false;
                            tb_reqno.Enabled = false;
                            dp_dd.Enabled = false;

                            tb_batchno.Enabled = false;
                            tb_item.Enabled = false;
                            cb_cat.Enabled = false;
                            cb_brandd.Enabled = false;
                            u1.Enabled = false;
                            u2.Enabled = false;
                            u3.Enabled = false;
                            tb_qty.Enabled = false;
                            tb_cost.Enabled = false;
                            tb_reOrder.Enabled = false;
                            dp_ed.Enabled = false;
                            rdactive.Enabled = false;
                            btn_update.Enabled = false;
                        }
                        else
                        {

                            //MessageBox.Show("NO DATA FILL");

                            tb_supfrom.Enabled = true;
                            tb_reqno.Enabled = true;
                            dp_dd.Enabled = true;

                            tb_batchno.Enabled = true;
                            tb_item.Enabled = true;
                            cb_cat.Enabled = true;
                            cb_brandd.Enabled = true;
                            u1.Enabled = true;
                            u2.Enabled = true;
                            u3.Enabled = true;
                            tb_qty.Enabled = true;
                            tb_cost.Enabled = true;
                            tb_reOrder.Enabled = true;
                            dp_ed.Enabled = true;
                            rdactive.Enabled = true;
                            btn_update.Enabled = true;

                            if (e.KeyCode == Keys.Enter)
                            {
                                tb_supfrom.Focus();
                            }
                        }
                        Reader.Close();

                        connection.Close();

                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show("Please try numeric");
                    }

                }
            }
        }

        private void tb_supfrom_Enter(object sender, EventArgs e)
        {
            connection.Close();
            if (cb_sup.Text == "select Supplier")
            {
                MessageBox.Show("Select supplier category first", "ERROR", MessageBoxButtons.OK, MessageBoxIcon.Stop);

                tb_supfrom.Enabled = false;
                tb_reqno.Enabled = false;
                dp_dd.Enabled = false;

                tb_batchno.Enabled = false;
                tb_item.Enabled = false;
                cb_cat.Enabled = false;
                cb_brandd.Enabled = false;
                u1.Enabled = false;
                u2.Enabled = false;
                u3.Enabled = false;
                tb_qty.Enabled = false;
                tb_cost.Enabled = false;
                tb_reOrder.Enabled = false;
                dp_ed.Enabled = false;
                rdactive.Enabled = false;
                btn_update.Enabled = false;
            }
            else
            {
                try
                {
                    string sql = "SELECT * FROM " + cb_sup.Text + " WHERE purchaseNo = " + tb_or.Text + " ";
                    Cmd = new MySqlCommand(sql, connection);

                    connection.Open();
                    //execute reader
                    Reader = Cmd.ExecuteReader();

                    if (Reader.Read())
                    {
                        OrNum = Reader.GetString("purchaseNo");

                        MessageBox.Show("The batch No. " + OrNum + " is already have, Please give a unique batch number", "STOP", MessageBoxButtons.OKCancel, MessageBoxIcon.Information);

                        tb_supfrom.Enabled = false;
                        tb_reqno.Enabled = false;
                        dp_dd.Enabled = false;
                       
                        tb_batchno.Enabled = false;
                        tb_item.Enabled = false;
                        cb_cat.Enabled = false;
                        cb_brandd.Enabled = false;
                        u1.Enabled = false;
                        u2.Enabled = false;
                        u3.Enabled = false;
                        tb_qty.Enabled = false;
                        tb_cost.Enabled = false;
                        tb_reOrder.Enabled = false;
                        dp_ed.Enabled = false;
                        rdactive.Enabled = false;
                        btn_update.Enabled = false;
                    }
                    else
                    {

                        //MessageBox.Show("NO DATA FILL");

                        tb_supfrom.Enabled = true;
                        tb_reqno.Enabled = true;
                        dp_dd.Enabled = true;
                        
                        tb_batchno.Enabled = true;
                        tb_item.Enabled = true;
                        cb_cat.Enabled = true;
                        cb_brandd.Enabled = true;
                        u1.Enabled = true;
                        u2.Enabled = true;
                        u3.Enabled = true;
                        tb_qty.Enabled = true;
                        tb_cost.Enabled = true;
                        tb_reOrder.Enabled = true;
                        dp_ed.Enabled = true;
                        rdactive.Enabled = true;
                        btn_update.Enabled = true;


                    }
                    Reader.Close();

                    connection.Close();
                }
                catch (Exception ex)
                {
                    //MessageBox.Show(ex.Message);
                    MessageBox.Show("Please try numeric");
                }
            }
        }

        void saveMe2()
        {
            connection.Close();

            connection.Open();
            string insert = "INSERT INTO drug (ItemID ,ItemName ,category ,brand ,unit ,stockQty ,price ,SupplierRef ,delDate ,expDate ,Status, reqNo, reOrdered, batchNo)"
             + "VALUES('" + tb_id.Text + "','" + tb_item.Text + "', '" + cb_cat.Text + "', '" + cb_brandd.Text + "','" + valunit + "','" + tb_qty.Text + "','" + tb_cost.Text + "','" + cb_sup.Text + "', '" + dp_dd.Text + "', '" + dp_ed.Text + "', '" + status1 + "', '" + tb_reqno.Text + "', '" + tb_reOrder.Text + "', '" + tb_batchno.Text + "');";
            //connection.Open();

            string insert1 = "INSERT INTO drug_product (ItemID ,ItemName ,category ,brand ,unit ,stockQty ,price ,SupplierRef ,delDate ,expDate ,Status, reqNo, reOrdered, batchNo, beforeExp)"
              + "VALUES('" + tb_id.Text + "','" + tb_item.Text + "', '" + cb_cat.Text + "', '" + cb_brandd.Text + "','" + valunit + "','" + tb_qty.Text + "','" + tb_cost.Text + "','" + cb_sup.Text + "', '" + dp_dd.Text + "', '" + dp_ed.Text + "', '" + status1 + "', '" + tb_reqno.Text + "', '" + tb_reOrder.Text + "', '" + tb_batchno.Text + "', '"+ dt_Expbefore.Text + "');";
            //connection.Open();



            Cmd = new MySqlCommand(insert, connection);
             MySqlCommand Cmd3 = new MySqlCommand(insert1, connection);

            try
            {
                if (Cmd.ExecuteNonQuery() == 1 && Cmd3.ExecuteNonQuery() == 1)
                {

                    //save

                    string insertto = "INSERT INTO drug_consume (ItemID ,ItemName ,category ,brand ,unit, stockQty2 , price , batchNo)"
                    +"VALUES('" + tb_id.Text + "','" + tb_item.Text + "', '" + cb_cat.Text + "', '" + cb_brandd.Text + "','" + valunit + "','" + 0 + "','" + tb_cost.Text + "', '" + tb_batchno.Text + "');";

                    string insertto1 = "INSERT INTO drug_logs (ItemID ,ItemName, stockQty1, batchNo )"
                    + "VALUES('" + tb_id.Text + "', '" + tb_item.Text + "', '" + tb_qty.Text + "','" + tb_batchno.Text + "');";


                    Cmd = new MySqlCommand(insert, connection);

                    MySqlCommand Cmd1 = new MySqlCommand(insertto, connection);

                    MySqlCommand Cmd2 = new MySqlCommand(insertto1, connection);
                                       

                    try
                    {
                        if (Cmd1.ExecuteNonQuery() == 1 && Cmd2.ExecuteNonQuery() == 1)
                        {
                            MessageBox.Show("data Saved!", "SAVE", MessageBoxButtons.OK, MessageBoxIcon.Information);

                            tb_supfrom.Text = "";
                            tb_reqno.Text = "";
                            dp_dd.Text = "";

                            tb_batchno.Items.Clear();
                            tb_item.Text = "blank";
                            cb_cat.Text = "select category";
                            cb_brandd.Text = "select brand";
                            u1.Text = "select unit";
                            u2.Text = "select";
                            u3.Text = "select";
                            tb_qty.Text = "0";
                            tb_cost.Text = "0.00";
                            tb_reOrder.Text = "";
                            dp_ed.Text = "";
                            rdactive.Text = "";
                            btn_update.Text = "";
                            cb_sup.Text = "select Supplier";

                        }
                        else
                        {
                            MessageBox.Show("data is not Save!", "SAVE", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }

                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(ex.Message);
                    }


                    connection.Close();

                    
                }
                else
                {
                    MessageBox.Show("data is not Save!", "SAVE", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }


            connection.Close();
            
        }


        private void btn_update_Click(object sender, EventArgs e)
        {
            getunit();


            if (cb_cat.Text.Contains("select category") && tb_item.Text.Contains("blank") && cb_brandd.Text.Contains("select brand") && tb_qty.Text.Contains("0") && tb_cost.Text.Contains("0.00") && cb_sup.Text.Contains("select Supplier"))
            {
                MessageBox.Show("Please input the given field(s)", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            else
            {
                try
                {
                    connection.Close();

                    string sql = "SELECT * FROM drug_product WHERE ItemID = '" + tb_id.Text + "' && batchNo='" + tb_batchno.Text + "'  ";
                    Cmd = new MySqlCommand(sql, connection);

                    connection.Open();
                    //execute reader
                    Reader = Cmd.ExecuteReader();

                    if (Reader.Read())
                    {
                        //OrNum = Reader.GetString("batchNo");
                        MessageBox.Show("Batch No is already taken, Please fill the next No.");

                    }
                    else
                    {


                        if (MessageBox.Show("Do you want to save it now?", "SAVE", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)
                        {

                            if (dp_ed.Text == dp_dd.Text)
                            {
                                MessageBox.Show("Please set the expiration date", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                            }
                            else
                            {
                                if (cb_sup.SelectedItem.ToString() == "purchaseoutside")
                                {
                                    string insert1 = "INSERT INTO purchaseoutside(purchaseNo,name,date,ItemID)"
                                     + "VALUES('" + tb_or.Text + "', '" + tb_supfrom.Text + "', '" + dp_dd.Text + "', '" + tb_id.Text + "');";
                                    connection.Close();
                                    connection.Open();

                                    Cmd = new MySqlCommand(insert1, connection);

                                    try
                                    {
                                        if (Cmd.ExecuteNonQuery() == 1)
                                        {
                                            //
                                            saveMe2();
                                            connection.Open();
                                        }
                                        else
                                        {
                                            MessageBox.Show("data is not Save!", "purchase outside", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        MessageBox.Show(ex.Message);
                                    }

                                    connection.Close();
                                    connection.Open();


                                }
                                else if (cb_sup.SelectedItem.ToString() == "csr")
                                {
                                    string insert1 = "INSERT INTO csr(purchaseNo, suppName, suppDate, ItemID)"
                                    + "VALUES('" + tb_or.Text + "', '" + tb_supfrom.Text + "', '" + dp_dd.Text + "', '" + tb_id.Text + "');";

                                    connection.Close();
                                    connection.Open();
                                    Cmd = new MySqlCommand(insert1, connection);

                                    try
                                    {
                                        if (Cmd.ExecuteNonQuery() == 1)
                                        {
                                            //
                                            saveMe2();
                                            // connection.Open();

                                        }
                                        else
                                        {
                                            MessageBox.Show("data is not Save!", "CSR", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        MessageBox.Show(ex.Message);
                                    }

                                    connection.Close();
                                    connection.Open();
                                }
                            }



                            //save the item

                        }
                        else
                        {
                            MessageBox.Show("data is not Save!", "SAVE", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }
                        //closing the first condition haha


                    }
                    Reader.Close();

                    connection.Close();

                }
                catch (Exception ex)
                {
                    //MessageBox.Show("Please try numeric");
                    MessageBox.Show(ex.Message);
                }
            }
        }

        private void tb_search_TextChanged(object sender, EventArgs e)
        {
            tb_batchno.Text = "";
        }

        private void tb_batchno_KeyDown(object sender, KeyEventArgs e)
        {
            connection.Close();
            if (e.KeyCode == Keys.Enter)
            {
               
               
            }
        }

        private void tb_qty_Enter(object sender, EventArgs e)
        {
            
        }

        string valunit;
        void getunit()
        {
            valunit = ""+u1.Text+" "+u2.Text+" "+u3.Text+"";
        }
        

        void suggestBatch()
        {
            Cmd = new MySqlCommand("SELECT DISTINCT batchNo from drug_product where ItemID = " + tb_id.Text + " ", connection);
            
            try
            {
                connection.Close();

                connection.Open();
                Reader = Cmd.ExecuteReader();


                while (Reader.Read())
                {
                    string sid = Reader.GetString("batchNo");


                    tb_batchno.Items.Add(sid);

                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            connection.Close();
        }


        string status1;

        private void ractive_CheckedChanged(object sender, EventArgs e)
        {
            string active = "active";
            status1 = active.ToString();
        }

        private void rdactive_CheckedChanged(object sender, EventArgs e)
        {
            string active = "not active";
            status1 = active.ToString();
        }

        

        int textID;
        int expiredBatchNo;
        string expname;
        string expdate;
        string expunit;
        double expPrice;
        int expstock;

        private void LVEXP_MouseClick(object sender, MouseEventArgs e)
        {
            textID = Convert.ToInt32(LVEXP.SelectedItems[0].SubItems[0].Text);
            expname = LVEXP.SelectedItems[0].SubItems[1].Text;
            expiredBatchNo = Convert.ToInt32(LVEXP.SelectedItems[0].SubItems[2].Text);
            expdate = LVEXP.SelectedItems[0].SubItems[3].Text;
            expunit = LVEXP.SelectedItems[0].SubItems[4].Text;
            expPrice = Convert.ToDouble(LVEXP.SelectedItems[0].SubItems[5].Text);
            expstock = Convert.ToInt32(LVEXP.SelectedItems[0].SubItems[6].Text);

        }

        int exp = 0;
        void expiredNow()
        {
            int ColumnAvg = 0;

            for (int i = 0; i < LVEXP.Items.Count; i++)
            {
                ColumnAvg += int.Parse(LVEXP.Items[i].SubItems[6].Text);
            }

            exp = Convert.ToInt32(ColumnAvg.ToString());

        }

        void moveTOexpired()
        {
            if (exp == 0)
            {
                MessageBox.Show("Choose the expired medicine", "Expired", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                string sourceDateText = expdate;
                DateTime sourceDate = DateTime.Parse(sourceDateText);
                string formatted = sourceDate.ToString("yyyy-MM-dd");

                string insert1 = "INSERT INTO expired_meds(ItemID, ItemName, unit, stockQty, price, expDate, batchNo)"
                 + "VALUES('" + textID + "', '" + expname + "', '" + expunit + "', '" + expstock + "', '" + expPrice + "', '" + formatted + "', '" + expiredBatchNo + "');";

                    connection.Close();
                    connection.Open();

                    Cmd = new MySqlCommand(insert1, connection);

                    try
                    {
                        if (Cmd.ExecuteNonQuery() == 1)
                        {
                            MessageBox.Show("data is save to expired med!", "Expired", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            


                            try
                            {
                                Cmd = new MySqlCommand("DELETE  from drug_product where ItemID IN ('" + textID + "') && batchNo IN ('" + expiredBatchNo + "')", connection);

                                connection.Close();
                                connection.Open();

                                Cmd.ExecuteNonQuery();

                                fillNotification();

                                connection.Close();
                            }
                            catch (Exception ex)
                            {
                                 MessageBox.Show(ex.Message);
                            }
                        connection.Close();
                        }
                        else
                        {
                            MessageBox.Show("data is not Save!", "purchase outside", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(ex.Message);
                    }

                    connection.Close();
                    
            }

            
        }

        private void btnExpired_Click(object sender, EventArgs e)
        {
            moveTOexpired();
        }

        private void notifyIcon1_DoubleClick(object sender, EventArgs e)
        {
            ShowInTaskbar = true;
            notifyIcon1.Visible = true;
            this.Show();
        }

        private void getMedicine_Click(object sender, EventArgs e)
        {
            if (cb_expBatch.Text == "----BATCH----")
            {
                MessageBox.Show("Select the Batch no of medicine first.","STOP", MessageBoxButtons.OK, MessageBoxIcon.Stop);
            }
            else
            {
                Cursor.Current = Cursors.WaitCursor;
                try
                {

                    Adapter = new MySqlDataAdapter("SELECT * FROM drug_product WHERE batchNo='" + cb_expBatch.Text + "';", connection);
                    ds.Reset();
                    Adapter.Fill(ds);

                    LVEXP.Items.Clear();

                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                        {
                            LVEXP.Items.Add(ds.Tables[0].Rows[i]["ItemID"].ToString());
                            LVEXP.Items[LVEXP.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["ItemName"].ToString());
                            LVEXP.Items[LVEXP.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["batchNo"].ToString());
                            LVEXP.Items[LVEXP.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["expDate"].ToString());
                            LVEXP.Items[LVEXP.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["unit"].ToString());
                            LVEXP.Items[LVEXP.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["price"].ToString());
                            LVEXP.Items[LVEXP.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["stockQty"].ToString());
                        }

                        expiredNow();
                    }


                }
                catch (Exception ex)
                {

                    MessageBox.Show(ex.Message);
                }

                Adapter.Dispose();

                connection.Close();
            }
            
        }

       private void btn_expClose_Click(object sender, EventArgs e)
        {
            p_damageMed.SendToBack();
        }

        private void tb_expInputno_Enter(object sender, EventArgs e)
        {
            if (tb_expInputno.Text == "0")
            {
                tb_expInputno.Text = "";
               
            }
        }

        private void tb_expInputno_Leave(object sender, EventArgs e)
        {
            if (tb_expInputno.Text == "")
            {
                tb_expInputno.Text = "0";

            }
        }

        void moveTODamage()
        {
            if (exp == 0)
            {
                MessageBox.Show("Choose the expired medicine", "Expired", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                string sourceDateText = expdate;
                DateTime sourceDate = DateTime.Parse(sourceDateText);
                string formatted = sourceDate.ToString("yyyy-MM-dd");

                string insert1 = "INSERT INTO expired_meds(ItemID, ItemName, unit, stockQty, price, expDate, batchNo)"
                 + "VALUES('" + textID + "', '" + expname + "', '" + expunit + "', '" + tb_expInputno.Text + "', '" + expPrice + "', '" + formatted + "', '" + expiredBatchNo + "');";

                connection.Close();
                connection.Open();

                Cmd = new MySqlCommand(insert1, connection);

                try
                {
                    if (Cmd.ExecuteNonQuery() == 1)
                    {
                        MessageBox.Show("data is save to expired med!", "Expired", MessageBoxButtons.OK, MessageBoxIcon.Information);



                        try
                        {
                            Cmd = new MySqlCommand("DELETE  from drug_product where ItemID IN ('" + textID + "') && batchNo IN ('" + expiredBatchNo + "')", connection);

                            connection.Close();
                            connection.Open();

                            Cmd.ExecuteNonQuery();

                            fillNotification();

                            connection.Close();
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show(ex.Message);
                        }
                        connection.Close();
                    }
                    else
                    {
                        MessageBox.Show("data is not Save!", "purchase outside", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }

                connection.Close();

            }


        }

        private void tb_expInputno_KeyDown(object sender, KeyEventArgs e)
        {

        }

        private void LVEXP_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            p_damageMed.BringToFront();

            textID = Convert.ToInt32(LVEXP.SelectedItems[0].SubItems[0].Text);
            tb_itemnamedamage.Text = LVEXP.SelectedItems[0].SubItems[1].Text;
            expiredBatchNo = Convert.ToInt32(LVEXP.SelectedItems[0].SubItems[2].Text);
            expdate = LVEXP.SelectedItems[0].SubItems[3].Text;
            expunit = LVEXP.SelectedItems[0].SubItems[4].Text;
            expPrice = Convert.ToDouble(LVEXP.SelectedItems[0].SubItems[5].Text);
            tb_expQty.Text = LVEXP.SelectedItems[0].SubItems[6].Text;

        }

        private void btnSetdamaged_Click(object sender, EventArgs e)
        {
            if(tb_expInputno.Text == "0")
            {
                MessageBox.Show("Please input the qty of the damaged medicine","INFORMATION", MessageBoxButtons.OK, MessageBoxIcon.Stop);
            }
            else
            {
                try
                {
                    connection.Close();

                    Cursor.Current = Cursors.WaitCursor;

                    string sql = "SELECT * FROM damaged_meds WHERE ItemID = " + textID + " && batchNo=" + cb_expBatch.Text + "  ";
                    Cmd = new MySqlCommand(sql, connection);

                    connection.Open();
                    //execute reader
                    Reader = Cmd.ExecuteReader();

                    if (Reader.Read())
                    {
                        int DamageStocks = Reader.GetInt32("stockQty");

                       // MessageBox.Show("Batch No is already taken, Please fill the next No.");

                        try
                        {
                            connection.Close();

                            int StockQty1 = Convert.ToInt32(tb_expQty.Text);
                            int StockQty2 = Convert.ToInt32(tb_expInputno.Text);

                            int resulStock = DamageStocks + StockQty2;

                            string sql1 = "UPDATE damaged_meds SET stockQty='" + resulStock + "'  WHERE ItemID=" + textID + " && batchNo=" + cb_expBatch.Text + " ";

                            int resulStock1 = StockQty1 - StockQty2;

                            string sql2 = "UPDATE drug_product SET stockQty='" + resulStock1 + "'  WHERE ItemID=" + textID + " && batchNo=" + cb_expBatch.Text + " ";

                            connection.Open();

                            Cmd = new MySqlCommand(sql1, connection);

                            MySqlCommand Cmd1 = new MySqlCommand(sql2, connection);


                            try
                            {
                                if (Cmd.ExecuteNonQuery() == 1 && Cmd1.ExecuteNonQuery() == 1)
                                {
                                    MessageBox.Show("The Stock of " + tb_itemnamedamage.Text + " is now " + resulStock1 + " is now updated", "SUCCESSFULLY UPDATE", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    LVEXP.Items.Clear();
                                    tb_expInputno.Text = "0";
                                    p_damageMed.SendToBack();
                                }
                                else
                                {
                                    MessageBox.Show("data is not updated");
                                }
                            }
                            catch (Exception ex)
                            {
                                MessageBox.Show(ex.Message);
                            }


                            connection.Close();
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show(ex.Message);
                        }
                        connection.Close();
                    }
                    else
                    {
                        //inserting a new damage medicine
                        string sourceDateText = expdate;
                        DateTime sourceDate = DateTime.Parse(sourceDateText);
                        string formatted = sourceDate.ToString("yyyy-MM-dd");


                        Cursor.Current = Cursors.WaitCursor;

                        //MessageBox.Show("there is no item");

                        string insert1 = "INSERT INTO damaged_meds(ItemID, ItemName, unit, stockQty, price, expDate, batchNo)"
                        + "VALUES('" + textID + "', '" + expname + "', '" + expunit + "', '" + tb_expInputno.Text + "', '" + expPrice + "', '" + formatted + "', '" + cb_expBatch.Text + "');";

                        connection.Close();
                        connection.Open();

                        Cmd = new MySqlCommand(insert1, connection);

                        try
                        {
                            if (Cmd.ExecuteNonQuery() == 1)
                            {
                                MessageBox.Show("data is save to expired med!", "Expired", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                
                                try
                                {

                                    connection.Close();

                                    int StockQty1 = Convert.ToInt32(tb_expQty.Text);
                                    int StockQty2 = Convert.ToInt32(tb_expInputno.Text);

                                    int resulStock = StockQty1 - StockQty2;

                                    string sql1 = "UPDATE drug_product SET stockQty='" + resulStock + "'  WHERE ItemID=" + textID + " && batchNo=" + cb_expBatch.Text + " ";


                                    connection.Open();

                                    Cmd = new MySqlCommand(sql1, connection);
                                  

                                    try
                                    {
                                        if (Cmd.ExecuteNonQuery() == 1)
                                        {
                                            MessageBox.Show("The Stock of "+ tb_itemnamedamage.Text + " is now " + resulStock + " is now updated","SUCCESSFULLY UPDATE",MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            LVEXP.Items.Clear();
                                            tb_expInputno.Text = "0";
                                            p_damageMed.SendToBack();
                                        }
                                        else
                                        {
                                             MessageBox.Show("data is not updated");
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        MessageBox.Show(ex.Message);
                                    }


                                    connection.Close();
                                }
                                catch (Exception ex)
                                {
                                    MessageBox.Show(ex.Message);
                                }
                                connection.Close();
                            }
                            else
                            {
                                MessageBox.Show("data is not Save!", "purchase outside", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show(ex.Message);
                        }

                        connection.Close();

                    }

                }
                catch (Exception ex)
                {

                }
              }
        }

        private void btn_expiredLogs_Click(object sender, EventArgs e)
        {

            if (cb_expBatch.Text == "----BATCH----")
            {
                MessageBox.Show("Please choose the right batch you want to filter", "INFORMATION", MessageBoxButtons.OK, MessageBoxIcon.Stop);
            }
            else
            {
                p_HistoryLogs.BringToFront();
                MedLOGS.Text = "Expired Medicine Logs";


                Cursor.Current = Cursors.WaitCursor;
                try
                {

                    Adapter = new MySqlDataAdapter("SELECT * FROM expired_meds WHERE batchNo='" + cb_expBatch.Text + "';", connection);
                    ds.Reset();
                    Adapter.Fill(ds);

                    LVLogs.Items.Clear();

                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                        {
                            LVLogs.Items.Add(ds.Tables[0].Rows[i]["ItemID"].ToString());
                            LVLogs.Items[LVLogs.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["ItemName"].ToString());
                            LVLogs.Items[LVLogs.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["batchNo"].ToString());
                            LVLogs.Items[LVLogs.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["expDate"].ToString());
                            LVLogs.Items[LVLogs.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["unit"].ToString());
                            LVLogs.Items[LVLogs.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["price"].ToString());
                            LVLogs.Items[LVLogs.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["stockQty"].ToString());
                        }

                        if (!System.IO.Directory.Exists(@"C:\ProgramData\Crystal_Report_Data_Source"))
                        {
                            System.IO.Directory.CreateDirectory(@"C:\ProgramData\Crystal_Report_Data_Source");
                        }

                        ds.WriteXml(@"C:\ProgramData\Crystal_Report_Data_Source\ExpiredLogs.xml");

                        expiredNow();
                    }


                }
                catch (Exception ex)
                {

                    MessageBox.Show(ex.Message);
                }

                Adapter.Dispose();

                connection.Close();
            }

            

        }

        private void btn_Closeme_Click(object sender, EventArgs e)
        {
            p_HistoryLogs.SendToBack();
        }

        private void btn_damageLogs_Click(object sender, EventArgs e)
        {
            

            if (cb_expBatch.Text == "----BATCH----")
            {
                MessageBox.Show("Please choose the right batch you want to filter", "INFORMATION", MessageBoxButtons.OK, MessageBoxIcon.Stop);
            }
            else
            {
                p_HistoryLogs.BringToFront();
                MedLOGS.Text = "Damaged Medicine Logs";


                Cursor.Current = Cursors.WaitCursor;
                try
                {

                    Adapter = new MySqlDataAdapter("SELECT * FROM damaged_meds WHERE batchNo='" + cb_expBatch.Text + "';", connection);
                    ds.Reset();
                    Adapter.Fill(ds);

                    LVLogs.Items.Clear();

                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                        {
                            LVLogs.Items.Add(ds.Tables[0].Rows[i]["ItemID"].ToString());
                            LVLogs.Items[LVLogs.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["ItemName"].ToString());
                            LVLogs.Items[LVLogs.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["batchNo"].ToString());
                            LVLogs.Items[LVLogs.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["expDate"].ToString());
                            LVLogs.Items[LVLogs.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["unit"].ToString());
                            LVLogs.Items[LVLogs.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["price"].ToString());
                            LVLogs.Items[LVLogs.Items.Count - 1].SubItems.Add(ds.Tables[0].Rows[i]["stockQty"].ToString());
                        }


                        if (!System.IO.Directory.Exists(@"C:\ProgramData\Crystal_Report_Data_Source"))
                        {
                            System.IO.Directory.CreateDirectory(@"C:\ProgramData\Crystal_Report_Data_Source");
                        }

                        ds.WriteXml(@"C:\ProgramData\Crystal_Report_Data_Source\DamagedLogs.xml");

                        expiredNow();
                    }


                }
                catch (Exception ex)
                {

                    MessageBox.Show(ex.Message);
                }

                Adapter.Dispose();

                connection.Close();
            }

        }

        private void btn_prnitExpDamaged_Click(object sender, EventArgs e)
        {
            if (MedLOGS.Text == "Expired Medicine Logs")
            {
                Cursor.Current = Cursors.WaitCursor;
                expiredLogs rptMED = new expiredLogs();

                rptMED.ShowDialog();
            }
            else if(MedLOGS.Text == "Damaged Medicine Logs")
            {
                Cursor.Current = Cursors.WaitCursor;
                expiredLogs rptMED = new expiredLogs();

                rptMED.ShowDialog();
            }
        }
    }//end

}//end
